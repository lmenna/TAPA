{"version":3,"sources":["../src/app.js"],"names":["dataDir","fileToProcess","tickersToSelect","fieldToSelect","readGoogleData","results","console","log","formatResults","MaxDaysFrom19700101","data","IntDaysFrom19700101","MaxTimestamp","Date","value","MaxBlockNumber","csvJSON","csv","lines","split","result","headers","i","length","obj","currentline","j","push","formatPricingData","pricingData","pricingJSON","replace","map","item","UnixTimeStamp","dataLoadAndSave","undefined","processCoinmetrics","ticker","coinmetricsData","then","res","catch","err"],"mappings":"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","sourcesContent":["/* app.js\n * desc: Entry point to run data loaders for the TaPA application.\n *\n */\n\nimport \"@babel/polyfill\";\nimport {getQuery, getBigQueryData} from \"./loaders/googleLoader\";\n// npm install mongodb --save-dev\nimport { MongoClient } from 'mongodb';\nimport { writeResultsToMongo } from \"./utils/dbUtils\"\nimport { loadPricingData } from \"./loaders/etherscanLoader\";\nimport { loadCoinmetricsFile } from \"./loaders/coinmetricsLoader\";\n\n// Data file where the coinmetrics data can be found.\nconst dataDir = \"./data/\";\nconst fileToProcess = dataDir + \"all.zip\";\n// Crypocurrencies to process from the coinmetrics dataset.\nconst tickersToSelect = [\n  \"eth\",\n  \"btc\",\n  \"xem\"\n];\n// Fields to load from the coinmetrics data set.\nconst fieldToSelect = [\n  \"date\",\n  \"txVolume(USD)\",\n  \"adjustedTxVolume(USD)\",\n  \"txCount\",\n  \"price(USD)\"\n];\n\n/* LoadGoogleDataIntoMongo()\n * desc: Gets data from BigQuery, formats the data and saves it to MongoDB\n *\n */\nasync function readGoogleData() {\n  var results;\n  try {\n    results = await getBigQueryData();\n  } catch(e) {\n    console.log(\"Error:\", e);\n  }\n  return(results);\n}\n\n\n/* formatResults(results)\n * desc: Take the raw results from BigQuery and formats it for writting to MongoDB\n * param: results Raw data from BigQuery\n */\nfunction formatResults(results) {\n\n  // Get block with the most recent data.  Copy some of this info into the top of the object.\n  results.MaxDaysFrom19700101 = results.data[0].IntDaysFrom19700101;\n  results.MaxTimestamp = new Date(results.data[0].MaxTimestamp.value);\n  results.MaxBlockNumber = results.data[0].MaxBlockNumber;\n  console.log(\"MaxDaysFrom19700101:\", results.MaxDaysFrom19700101);\n  console.log(\"MaxTimestamp:\", results.MaxTimestamp);\n  console.log(\"MaxBlockNumber:\", results.MaxBlockNumber);\n}\n\n//var csv is the CSV file with headers\nfunction csvJSON(csv){\n\n  var lines=csv.split(\"\\n\");\n  var result = [];\n  var headers=lines[0].split(\",\");\n  for(var i=1;i<lines.length;i++){\n      var obj = {};\n      var currentline=lines[i].split(\",\");\n      for(var j=0;j<headers.length;j++){\n          obj[headers[j]] = currentline[j];\n      }\n      result.push(obj);\n  }\n  //return result; //JavaScript object\n  return({\"data\" : result}); //JSON\n}\n\nfunction formatPricingData(pricingData) {\n\n  var pricingJSON = csvJSON(pricingData.replace(/['\"]+/g, '').replace(/['\\r]+/g, ''));\n  // Need and integer number of days from 19700101\n  // CEILING(UNIX_MILLIS(blocks.timestamp)/(60*60*24))\n  pricingJSON.data.map(item => {\n    item.IntDaysFrom19700101 = item.UnixTimeStamp/(60*60*24);\n  });\n  return(pricingJSON);\n}\n\nasync function dataLoadAndSave() {\n  var results = await readGoogleData();\n  if (results === undefined) {\n    console.log(\"No data was returned from BigQuery\");\n  }\n  else if (results.data.length > 0) {\n    console.log(\"Got good results. Number of records:\", results.data.length);\n    formatResults(results);\n    writeResultsToMongo(results, \"marketdata.eth_transactions\");\n    var pricingData = await loadPricingData();\n    var pricingJSON = formatPricingData(pricingData);\n    console.log(pricingJSON);\n    writeResultsToMongo(pricingJSON, \"marketdata.eth_prices\");\n  }\n  else {\n    console.log(\"BigQuery worked but results.data had no rows.\")\n  }\n}\n\nasync function processCoinmetrics() {\n  tickersToSelect.map(async(item) => {\n    var ticker = item;\n    var coinmetricsData = await loadCoinmetricsFile(fileToProcess, ticker, fieldToSelect);\n    writeResultsToMongo(coinmetricsData, \"marketdata.transaction_prices\")\n  });\n}\n\nprocessCoinmetrics().then(res => res).catch(err => console.log(\"err:\", err));\n\n// dataLoadAndSave();\n"],"file":"app.js"}