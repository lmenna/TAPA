{"version":3,"sources":["../src/app.js"],"names":["readGoogleData","results","console","log","writeResultsToMongo","url","process","env","mongoU","mongoP","host","MongoClient","connect","err","db","collection","insertOne","res","close","e","readFromMongo","find","toArray","result","length","map","item","dataLoadAndSave","undefined","data"],"mappings":"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","sourcesContent":["/* app.js\n * desc: Entry point to run data loaders for the TaPA application.\n *\n */\n\nimport \"@babel/polyfill\";\nimport {getQuery, getBigQueryData} from \"./loaders/googleLoader\";\n// npm install mongodb --save-dev\nimport { MongoClient } from 'mongodb';\n\n\n/* LoadGoogleDataIntoMongo()\n * desc: Gets data from BigQuery, formats the data and saves it to MongoDB\n *\n */\nasync function readGoogleData() {\n  var results;\n  try {\n    results = await getBigQueryData();\n  } catch(e) {\n    console.log(\"Error:\", e);\n  }\n  return(results);\n}\n\n/* writeResultsToMongo()\n * desc: Writes results from the google BigQuery into MongoDB on the cloud\n * param: results - the formatted big query results.\n *\n */\nasync function writeResultsToMongo(results) {\n\n  var url = \"mongodb://\" + process.env.mongoU +\":\"+ process.env.mongoP + \"@\" + process.env.host + \"/ethereum\";\n  console.log(\"Connect to Mongo\");\n  MongoClient.connect(url, function(err, db) {\n    if(err) {\n      console.log('Unable to connect to the DB server', err);\n    }\n    else {\n      console.log('Connection established');\n      try {\n        var collection = db.collection('marketdata.eth_transactions');\n        // await collection.insert({\"name\": \"value\"});\n        db.collection(\"marketdata.eth_transactions\").insertOne(results, function(err, res) {\n          if (err)\n            throw err;\n          console.log(\"Result was inserted\");\n          db.close();\n        });\n      }\n      catch(e) {\n        console.log(\"Error:\", e);\n      }\n    }\n  });\n}\n\n/* readFromMongo()\n * desc: Reads previously stored results from MongoDB\n *\n */\nfunction readFromMongo() {\n\n  var url = \"mongodb://\" + process.env.mongoU +\":\"+ process.env.mongoP + \"@\" + process.env.host + \"/ethereum\";\n  MongoClient.connect(url, function(err, db) {\n    if(err) {\n      console.log('Unable to connect to the DB server', err);\n    }\n    else {\n      console.log('Connection established');\n      var collection = db.collection(\"marketdata.eth_transactions\");\n      collection.find({}).toArray(function(err, result) {\n        if (err) {\n          console.log(\"Error retrieving data. \", err);\n        }\n        else if (result.length){\n          result.map(item => {\n            console.log(item);\n          });\n        } else {\n          console.log(\"No documents found\");\n        }\n        db.close();\n      });\n    }\n  });\n}\n\nasync function dataLoadAndSave() {\n  var results = await readGoogleData();\n  if (results === undefined) {\n    console.log(\"No data was returned from BigQuery\");\n  }\n  else if (results.data.length > 0) {\n    console.log(\"Got good results. Write them to MongoDB\");\n    writeResultsToMongo(results);\n  }\n}\n\ndataLoadAndSave();\n"],"file":"app.js"}