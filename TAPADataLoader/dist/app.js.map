{"version":3,"sources":["../src/app.js"],"names":["readGoogleData","results","console","log","formatResults","MaxDaysFrom19700101","data","IntDaysFrom19700101","MaxTimestamp","Date","value","MaxBlockNumber","dataLoadAndSave","undefined","length"],"mappings":";;AAKA;;AACA;;AAEA;;AACA;;;;;;AAEA;;;;SAIeA,c;;;AAWf;;;;;;;;;0BAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAGoB,oCAHpB;;AAAA;AAGIC,YAAAA,OAHJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAKIC,YAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;;AALJ;AAAA,6CAOSF,OAPT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAeA,SAASG,aAAT,CAAuBH,OAAvB,EAAgC;AAE9B;AACAA,EAAAA,OAAO,CAACI,mBAAR,GAA8BJ,OAAO,CAACK,IAAR,CAAa,CAAb,EAAgBC,mBAA9C;AACAN,EAAAA,OAAO,CAACO,YAAR,GAAuB,IAAIC,IAAJ,CAASR,OAAO,CAACK,IAAR,CAAa,CAAb,EAAgBE,YAAhB,CAA6BE,KAAtC,CAAvB;AACAT,EAAAA,OAAO,CAACU,cAAR,GAAyBV,OAAO,CAACK,IAAR,CAAa,CAAb,EAAgBK,cAAzC;AACAT,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCF,OAAO,CAACI,mBAA5C;AACAH,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,OAAO,CAACO,YAArC;AACAN,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BF,OAAO,CAACU,cAAvC;AACD;;SAGcC,e;;;;;;;0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACsBZ,cAAc,EADpC;;AAAA;AACMC,YAAAA,OADN;;AAEE,gBAAIA,OAAO,KAAKY,SAAhB,EAA2B;AACzBX,cAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ;AACD,aAFD,MAGK,IAAIF,OAAO,CAACK,IAAR,CAAaQ,MAAb,GAAsB,CAA1B,EAA6B;AAChCZ,cAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ,EAAoDF,OAAO,CAACK,IAAR,CAAaQ,MAAjE;AACAV,cAAAA,aAAa,CAACH,OAAD,CAAb;AACA,gDAAoBA,OAApB;AACD,aAJI,MAKA;AACHC,cAAAA,OAAO,CAACC,GAAR,CAAY,+CAAZ;AACD;;AAZH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAeAS,eAAe","sourcesContent":["/* app.js\n * desc: Entry point to run data loaders for the TaPA application.\n *\n */\n\nimport \"@babel/polyfill\";\nimport {getQuery, getBigQueryData} from \"./loaders/googleLoader\";\n// npm install mongodb --save-dev\nimport { MongoClient } from 'mongodb';\nimport { writeResultsToMongo } from \"./utils/dbUtils\"\n\n/* LoadGoogleDataIntoMongo()\n * desc: Gets data from BigQuery, formats the data and saves it to MongoDB\n *\n */\nasync function readGoogleData() {\n  var results;\n  try {\n    results = await getBigQueryData();\n  } catch(e) {\n    console.log(\"Error:\", e);\n  }\n  return(results);\n}\n\n\n/* formatResults(results)\n * desc: Take the raw results from BigQuery and formats it for writting to MongoDB\n * param: results Raw data from BigQuery\n */\nfunction formatResults(results) {\n\n  // Get block with the most recent data.  Copy some of this info into the top of the object.\n  results.MaxDaysFrom19700101 = results.data[0].IntDaysFrom19700101;\n  results.MaxTimestamp = new Date(results.data[0].MaxTimestamp.value);\n  results.MaxBlockNumber = results.data[0].MaxBlockNumber;\n  console.log(\"MaxDaysFrom19700101:\", results.MaxDaysFrom19700101);\n  console.log(\"MaxTimestamp:\", results.MaxTimestamp);\n  console.log(\"MaxBlockNumber:\", results.MaxBlockNumber);\n}\n\n\nasync function dataLoadAndSave() {\n  var results = await readGoogleData();\n  if (results === undefined) {\n    console.log(\"No data was returned from BigQuery\");\n  }\n  else if (results.data.length > 0) {\n    console.log(\"Got good results. Number of records:\", results.data.length);\n    formatResults(results);\n    writeResultsToMongo(results);\n  }\n  else {\n    console.log(\"BigQuery worked but results.data had no rows.\")\n  }\n}\n\ndataLoadAndSave();\n"],"file":"app.js"}