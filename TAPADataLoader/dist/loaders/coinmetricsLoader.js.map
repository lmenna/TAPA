{"version":3,"sources":["../../src/loaders/coinmetricsLoader.js"],"names":["csvJSON","csv","fieldsToSelect","lines","split","result","headers","indexesToSelect","map","field","indexOf","i","length","obj","currentline","j","includes","datePosition","date","Date","getTime","push","csvJSONAllFields","loadCoinmetricsFile","fileToProcess","tickerToProcess","jsonData","Promise","resolve","reject","fs","readFile","err","data","console","log","JSZip","loadAsync","then","zip","files","Object","keys","Error","file","async","header","ticker","legnth","availableFields"],"mappings":"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","sourcesContent":["/* coinmetricsLoader.js\n * desc: Extracts data from the file found at \"https://coinmetrics.io/data/all.zip\"\n *       Assumes the file was downloaded previously into a locally accesible file.\n *\n */\nimport fs from \"fs\";\n// npm install jszip --save-dev\nimport JSZip from \"jszip\";\n// npm install lodash --save-dev\nimport cloneDeep from \"lodash/cloneDeep\";\n\n/* csvJSON(csv, fieldsToSelect)\n * desc: Take csv data as a string and parses it into an object with names matching the header row.\n * param: csv data.\n * param: fieldsToSelect. This version only includes select fields from the .csv data.\n * Note: This is a simplified parser that will work for the coin metrics csv content.  It will not process\n *       generalized csv formats.\n */\nfunction csvJSON(csv, fieldsToSelect){\n\n  var lines=csv.split(\"\\n\");\n  var result = [];\n  var headers=lines[0].split(\",\");\n  // Find location of required headers. -1 indicates data doesn't contain the header\n  var indexesToSelect = fieldsToSelect.map(field => {\n    return( headers.indexOf(field) );\n  })\n  for(var i=1; i<lines.length; i++){\n      var obj = {};\n      var currentline=lines[i].split(\",\");\n      for(var j=0;j<headers.length;j++){\n          if(indexesToSelect.includes(j))\n            obj[headers[j]] = currentline[j];\n      }\n      // Add a unix date to the date from the date field\n      // Only push data to the result set if it has a valid date.\n      var datePosition = headers.indexOf('date');\n      if (datePosition!=-1) {\n        const date = currentline[datePosition];\n        if (date!=\"\") {\n          obj[\"unixDate\"] = new Date(date).getTime()/1000;\n          result.push(obj);\n        }\n      }\n  }\n  return(result); //JSON\n}\n\n/* csvJSONAllFields(csv)\n * desc: Take csv data as a string and parses it into an object with names matching the header row.\n * param: csv data.  This version includes all fields present in the .csv data.\n * Note: This is a simplified parser that will work for the coin metrics csv content.  It will not process\n *       generalized csv formats.\n */\nfunction csvJSONAllFields(csv){\n\n  var lines=csv.split(\"\\n\");\n  var result = [];\n  var headers=lines[0].split(\",\");\n  for(var i=1; i<lines.length; i++){\n      var obj = {};\n      var currentline=lines[i].split(\",\");\n      for(var j=0;j<headers.length;j++){\n            obj[headers[j]] = currentline[j];\n      }\n      // Add a unix date to the date from the date field\n      // Only push data to the result set if it has a valid date.\n      var datePosition = headers.indexOf('date');\n      if (datePosition!=-1) {\n        const date = currentline[datePosition];\n        if (date!=\"\") {\n          obj[\"unixDate\"] = new Date(date).getTime()/1000;\n          result.push(obj);\n        }\n      }\n  }\n  return(result); //JSON\n}\n\n/* loadCoinmetricsFile(fileToProcess)\n * desc: Reads data from a presiously downloaded coinmetrics data file.\n * param: File to load inclusing path to it's location.  Ex. \"./data/all.zip\"\n * param: Array of crypocurrencies to load.\n * returns: JSON object containing data for all crypocurrencies requested\n */\nasync function loadCoinmetricsFile(fileToProcess, tickerToProcess, fieldsToSelect) {\n\n  var jsonData = {\n    \"header\": {\n        \"ticker\": \"\",\n        \"filename\": fileToProcess,\n        \"availableFields\": []\n      },\n    \"data\": {}\n  };\n  return new Promise(function (resolve, reject) {\n    fs.readFile(fileToProcess, function(err, data) {\n      if (err) {\n        console.log(\"Error:\", err);\n        reject(err);\n      }\n      JSZip.loadAsync(data).then(function (zip) {\n        var fileToProcess = tickerToProcess + \".csv\";\n        var files = Object.keys(zip.files);\n        if (files.indexOf(fileToProcess)===-1) {\n          console.log(\"Error processing file:\", fileToProcess);\n          console.log(\"Promise rejected with.  Data not found for:\" + tickerToProcess);\n          var err = new Error(\"Data not found for:\" + tickerToProcess);\n          reject(err);\n          return(err);\n        }\n        zip.file(fileToProcess).async(\"string\").then( function (data) {\n          console.log(\"Processing:\", fileToProcess);\n          jsonData.header.ticker = tickerToProcess;\n          if (fieldsToSelect.legnth===0) {\n            console.log(\"Load coinmetrics data using select fields.\");\n            jsonData.data = csvJSON(data, fieldsToSelect);\n          }\n          else {\n            console.log(\"Load coinmetrics data using ALL fields.\");\n            jsonData.data = csvJSONAllFields(data);\n          }\n          if (jsonData.data.length > 0) {\n              jsonData.header.availableFields = Object.keys(jsonData.data[0]);\n          }\n          resolve(jsonData);\n        });\n      });\n    });\n  });\n}\n\nexport { loadCoinmetricsFile }\n"],"file":"coinmetricsLoader.js"}