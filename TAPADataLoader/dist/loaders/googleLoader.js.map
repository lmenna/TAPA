{"version":3,"sources":["../../src/loaders/googleLoader.js"],"names":["require","BigQuery","runBigQuery","queryToRun","bigquery2","projectId","keyFilename","console","log","resultSet","header","query","rowCount","errorCode","errorMsg","data","promise","Promise","resolve","reject","createQueryStream","on","error","row","push","r","getBigQueryData","result"],"mappings":";;;;;;;;;;;AAAA;;;;AAKA;eACmBA,OAAO,CAAC,wBAAD,C;IAAnBC,Q,YAAAA,Q;AAEP;;;;;;SAIeC,W;;;;;;;0BAAf,iBAA2BC,UAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQC,YAAAA,SAFR,GAEoB,IAAIH,QAAJ,CAAa;AAC7BI,cAAAA,SAAS,EAAE,oBADkB;AAE7BC,cAAAA,WAAW,EAAE;AAFgB,aAAb,CAFpB;AAOEC,YAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BL,UAA9B;AACIM,YAAAA,SARN,GAQkB;AACdC,cAAAA,MAAM,EAAE;AACNC,gBAAAA,KAAK,EAAER,UADD;AAENS,gBAAAA,QAAQ,EAAE,CAFJ;AAGNC,gBAAAA,SAAS,EAAE,CAHL;AAINC,gBAAAA,QAAQ,EAAE;AAJJ,eADM;AAOdC,cAAAA,IAAI,EAAE;AAPQ,aARlB;AAiBMH,YAAAA,QAjBN,GAiBiB,CAjBjB;AAmBMI,YAAAA,OAnBN,GAmBgB,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC7Cf,cAAAA,SAAS,CAACgB,iBAAV,CAA4BjB,UAA5B,EACGkB,EADH,CACM,OADN,EACed,OAAO,CAACe,KADvB,EAEGD,EAFH,CAEM,MAFN,EAEc,UAASE,GAAT,EAAc;AACxBd,gBAAAA,SAAS,CAACM,IAAV,CAAeS,IAAf,CAAoBD,GAApB;AACAX,gBAAAA,QAAQ;AACT,eALH,EAMGS,EANH,CAMM,KANN,EAMa,YAAW;AACpBZ,gBAAAA,SAAS,CAACC,MAAV,CAAiBE,QAAjB,GAA4BA,QAA5B;AACAL,gBAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ;AACAU,gBAAAA,OAAO,CAACT,SAAD,CAAP;AACD,eAVH;AAWC,aAZW,CAnBhB;AAAA;AAAA,mBAgCkBO,OAhClB;;AAAA;AAgCQS,YAAAA,CAhCR;AAAA,6CAiCWhB,SAjCX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAkCC;AAED;;;;;SAIeiB,e;;;;;;;0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAEE;AACA;AACIf,YAAAA,KAJN,GAIc,sGAJd;AAKEA,YAAAA,KAAK,IAAI,gDAAT;AACAA,YAAAA,KAAK,IAAI,wCAAT;AACAA,YAAAA,KAAK,IAAI,wCAAT;AACAA,YAAAA,KAAK,IAAI,yDAAT;AACAA,YAAAA,KAAK,IAAI,yDAAT;AACAA,YAAAA,KAAK,IAAI,uCAAT;AACAA,YAAAA,KAAK,IAAI,uCAAT;AACAA,YAAAA,KAAK,IAAI,uCAAT;AACAA,YAAAA,KAAK,IAAI,mEAAT;AACAA,YAAAA,KAAK,IAAI,2BAAT;AACAA,YAAAA,KAAK,IAAI,6EAAT;AACAA,YAAAA,KAAK,IAAI,+BAAT;AACAA,YAAAA,KAAK,IAAI,mCAAT;AAjBF;AAAA;AAAA,mBAqBmBT,WAAW,CAACS,KAAD,CArB9B;;AAAA;AAqBIgB,YAAAA,MArBJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAuBIpB,YAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;;AAvBJ;AAyBED,YAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BmB,MAA7B;AAzBF,8CA0BSA,MA1BT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["/* googleLoader.js\n * desc: Runs queries against the google BigQuery public data sets\n *\n */\n\n// Got this using npm install --save @google-cloud/bigquery\nconst {BigQuery} = require('@google-cloud/bigquery');\n\n/* getBigQueryData(query)\n * desc: Run the BigQuery using async and await execution model.\n * param: String with the query to run.\n */\nasync function runBigQuery(queryToRun)\n{\n  const bigquery2 = new BigQuery({\n    projectId: 'eth-testing-221913',\n    keyFilename: '/Users/yglm/eth-testing-221913-87aaade4d104.json'\n  });\n\n  console.log(\"Running Query:\", queryToRun);\n  var resultSet = {\n    header: {\n      query: queryToRun,\n      rowCount: 0,\n      errorCode: 0,\n      errorMsg: \"\"\n    },\n    data: []\n  };\n  var rowCount = 0;\n\n  let promise = new Promise((resolve, reject) => {\n    bigquery2.createQueryStream(queryToRun)\n      .on('error', console.error)\n      .on('data', function(row) {\n        resultSet.data.push(row);\n        rowCount++;\n      })\n      .on('end', function() {\n        resultSet.header.rowCount = rowCount;\n        console.log(\"Resolving promise with result set.\");\n        resolve(resultSet);\n      });\n    });\n    let r = await promise; // wait till the promise resolves (*)\n    return(resultSet);\n};\n\n/* getBigQueryData()\n * desc: async Wrapper function to call into getBigQueryData() and wait for the result.\n *\n */\nasync function getBigQueryData() {\n\n  // SQL to run on BigQuery.  Will return the daily Ethereum transaction counts.\n  // It runs using the time interval from current time back 200 Hours = 8.33 days\n  var query = \"select CAST(CEILING(UNIX_MILLIS(blocks.timestamp)/(1000*60*60*24)) as INT64) as IntDaysFrom19700101,\"\n  query += \"sum(blocks.transaction_count) as Transactions,\";\n  query += \"min(blocks.timestamp) as MinTimestamp,\";\n  query += \"max(blocks.timestamp) as MaxTimestamp,\";\n  query += \"min(UNIX_MILLIS(blocks.timestamp)) as MinUnixTimestamp,\";\n  query += \"max(UNIX_MILLIS(blocks.timestamp)) as MaxUnixTimestamp,\";\n  query += \"min(blocks.number) as MinBlockNumber,\";\n  query += \"max(blocks.number) as MaxBlockNumber,\";\n  query += \"sum(blocks.difficulty) as Difficulty \";\n  query += \"from `bigquery-public-data.ethereum_blockchain.blocks` as blocks \";\n  query += \"where blocks.number != 0 \";\n  query += \"and blocks.timestamp > TIMESTAMP_SUB(current_timestamp, INTERVAL 200 HOUR) \";\n  query += \"group by IntDaysFrom19700101 \";\n  query += \"order by IntDaysFrom19700101 DESC\";\n\n  var result;\n  try {\n    result = await runBigQuery(query);\n  } catch(e) {\n    console.log(\"Error:\", e);\n  }\n  console.log(\"Query result:\", result);\n  return(result);\n}\n\nexport {getBigQueryData}\n"],"file":"googleLoader.js"}