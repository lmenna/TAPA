{"version":3,"sources":["../../src/loaders/googleLoader.js"],"names":["require","BigQuery","query","getQuery","getBigQueryData","bigquery2","projectId","keyFilename","resultSet","header","rowCount","errorCode","errorMsg","data","promise","Promise","resolve","reject","createQueryStream","on","console","error","row","push","log","r","TestQuery","result"],"mappings":";;;;;;;;;;;;AAAA;eACmBA,OAAO,CAAC,wBAAD,C;IAAnBC,Q,YAAAA,Q,EAEP;AACA;;;AACA,IAAIC,KAAK,GAAG,sGAAZ;AACAA,KAAK,IAAI,gDAAT;AACAA,KAAK,IAAI,wCAAT;AACAA,KAAK,IAAI,wCAAT;AACAA,KAAK,IAAI,yDAAT;AACAA,KAAK,IAAI,yDAAT;AACAA,KAAK,IAAI,uCAAT;AACAA,KAAK,IAAI,uCAAT;AACAA,KAAK,IAAI,uCAAT;AACAA,KAAK,IAAI,mEAAT;AACAA,KAAK,IAAI,2BAAT;AACAA,KAAK,IAAI,6EAAT;AACAA,KAAK,IAAI,+BAAT;AACAA,KAAK,IAAI,mCAAT;AAEA;;;;;AAIA,SAASC,QAAT,GAAoB;AAClB,SAAOD,KAAP;AACD;AAED;;;;;;SAIeE,e;;;;;;;0BAAf,iBAA+BF,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQG,YAAAA,SAFR,GAEoB,IAAIJ,QAAJ,CAAa;AAC7BK,cAAAA,SAAS,EAAE,oBADkB;AAE7BC,cAAAA,WAAW,EAAE;AAFgB,aAAb,CAFpB;AAOMC,YAAAA,SAPN,GAOkB;AACdC,cAAAA,MAAM,EAAE;AACNP,gBAAAA,KAAK,EAAEA,KADD;AAENQ,gBAAAA,QAAQ,EAAE,CAFJ;AAGNC,gBAAAA,SAAS,EAAE,CAHL;AAINC,gBAAAA,QAAQ,EAAE;AAJJ,eADM;AAOdC,cAAAA,IAAI,EAAE;AAPQ,aAPlB;AAgBMH,YAAAA,QAhBN,GAgBiB,CAhBjB;AAkBMI,YAAAA,OAlBN,GAkBgB,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC7CZ,cAAAA,SAAS,CAACa,iBAAV,CAA4BhB,KAA5B,EACGiB,EADH,CACM,OADN,EACeC,OAAO,CAACC,KADvB,EAEGF,EAFH,CAEM,MAFN,EAEc,UAASG,GAAT,EAAc;AACxBd,gBAAAA,SAAS,CAACK,IAAV,CAAeU,IAAf,CAAoBD,GAApB;AACAZ,gBAAAA,QAAQ;AACT,eALH,EAMGS,EANH,CAMM,KANN,EAMa,YAAW;AACpBX,gBAAAA,SAAS,CAACC,MAAV,CAAiBC,QAAjB,GAA4BA,QAA5B;AACAU,gBAAAA,OAAO,CAACI,GAAR,CAAY,oCAAZ;AACAR,gBAAAA,OAAO,CAACR,SAAD,CAAP;AACD,eAVH;AAWC,aAZW,CAlBhB;AAAA;AAAA,mBA+BkBM,OA/BlB;;AAAA;AA+BQW,YAAAA,CA/BR;AAAA,6CAgCWjB,SAhCX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAiCC;AAED;;;;;SAIekB,S;;;;;;;0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAGmBtB,eAAe,CAACF,KAAD,CAHlC;;AAAA;AAGIyB,YAAAA,MAHJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAKIP,YAAAA,OAAO,CAACI,GAAR,CAAY,QAAZ;;AALJ;AAOEJ,YAAAA,OAAO,CAACI,GAAR,CAAY,eAAZ,EAA6BG,MAA7B;;AAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["// Got this using npm install --save @google-cloud/bigquery\nconst {BigQuery} = require('@google-cloud/bigquery');\n\n// SQL to run on BigQuery.  Will return the daily Ethereum transaction counts.\n// It runs using the time interval from current time back 200 Hours = 8.33 days\nvar query = \"select CAST(CEILING(UNIX_MILLIS(blocks.timestamp)/(1000*60*60*24)) as INT64) as IntDaysFrom19700101,\"\nquery += \"sum(blocks.transaction_count) as Transactions,\";\nquery += \"min(blocks.timestamp) as MinTimestamp,\";\nquery += \"max(blocks.timestamp) as MaxTimestamp,\";\nquery += \"min(UNIX_MILLIS(blocks.timestamp)) as MinUnixTimestamp,\";\nquery += \"max(UNIX_MILLIS(blocks.timestamp)) as MaxUnixTimestamp,\";\nquery += \"min(blocks.number) as MinBlockNumber,\";\nquery += \"max(blocks.number) as MaxBlockNumber,\";\nquery += \"sum(blocks.difficulty) as Difficulty \";\nquery += \"from `bigquery-public-data.ethereum_blockchain.blocks` as blocks \";\nquery += \"where blocks.number != 0 \";\nquery += \"and blocks.timestamp > TIMESTAMP_SUB(current_timestamp, INTERVAL 200 HOUR) \";\nquery += \"group by IntDaysFrom19700101 \";\nquery += \"order by IntDaysFrom19700101 DESC\";\n\n/* getQuery()\n * desc: returns the query string used to retrieve data from BigQuery\n *\n */\nfunction getQuery() {\n  return(query);\n}\n\n/* getBigQueryData(query)\n * desc: Run the BigQuery using async and await execution model.\n * param: String with the query to run.\n */\nasync function getBigQueryData(query)\n{\n  const bigquery2 = new BigQuery({\n    projectId: 'eth-testing-221913',\n    keyFilename: '/Users/yglm/eth-testing-221913-87aaade4d104.json'\n  });\n\n  var resultSet = {\n    header: {\n      query: query,\n      rowCount: 0,\n      errorCode: 0,\n      errorMsg: \"\"\n    },\n    data: []\n  };\n  var rowCount = 0;\n\n  let promise = new Promise((resolve, reject) => {\n    bigquery2.createQueryStream(query)\n      .on('error', console.error)\n      .on('data', function(row) {\n        resultSet.data.push(row);\n        rowCount++;\n      })\n      .on('end', function() {\n        resultSet.header.rowCount = rowCount;\n        console.log(\"Resolving promise with result set.\");\n        resolve(resultSet);\n      });\n    });\n    let r = await promise; // wait till the promise resolves (*)\n    return(resultSet);\n};\n\n/* TestQuery()\n * desc: async Wrapper function to call into getBigQueryData() and wait for the result.\n *\n */\nasync function TestQuery() {\n  var result;\n  try {\n    result = await getBigQueryData(query);\n  } catch(e) {\n    console.log(\"Error:\", e);\n  }\n  console.log(\"Query result:\", result);\n}\n\nexport {getBigQueryData, getQuery}\n"],"file":"googleLoader.js"}