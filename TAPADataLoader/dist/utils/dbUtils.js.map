{"version":3,"sources":["../../src/utils/dbUtils.js"],"names":["getMostRecentETHData","url","process","env","URLEth","undefined","console","log","MongoClient","connect","useNewUrlParser","client","db","collection","find","toArray","close","writeResultsToMongo","dataToWrite","targetDB","targetCollection","URLCrypto","insertOne"],"mappings":";;;;;;;;AAKA;;;;;;AAEA;;;;SAIgBA,oB;;;AAmBhB;;;;;;;;;;0BAnBC;AAAA;AAAA;AAAA;AAAA;AAAA;AACKC,YAAAA,GADL,GACWC,OAAO,CAACC,GAAR,CAAYC,MADvB;;AAAA,kBAEKH,GAAG,IAAEI,SAAL,IAAkBJ,GAAG,KAAG,EAF7B;AAAA;AAAA;AAAA;;AAGGK,YAAAA,OAAO,CAACC,GAAR,CAAY,yCAAZ;AACAD,YAAAA,OAAO,CAACC,GAAR,CAAY,0DAAZ;AAJH;AAAA;;AAAA;AAAA;AAAA;AAAA,mBAUoBC,qBAAYC,OAAZ,CAAoBR,GAApB,EAAyB;AAAES,cAAAA,eAAe,EAAE;AAAnB,aAAzB,CAVpB;;AAAA;AAUKC,YAAAA,MAVL;AAWKC,YAAAA,EAAE,GAAGD,MAAM,CAACC,EAAP,CAAU,UAAV,CAAL;AAXL;AAAA,mBAYkBA,EAAE,CAACC,UAAH,CAAc,6BAAd,EAA6CC,IAA7C,CAAkD,EAAlD,EAAsDC,OAAtD,EAZlB;;AAAA;AAAA;;AAAA;AAAA;AAcKJ,YAAAA,MAAM,CAACK,KAAP;AAdL;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAwBcC,mB;;;;;;;0BAAf,kBAAmCC,WAAnC,EAAgDC,QAAhD,EAA0DC,gBAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAEMnB,YAAAA,GAFN,GAEYC,OAAO,CAACC,GAAR,CAAYkB,SAFxB;;AAAA,kBAGMpB,GAAG,IAAEI,SAAL,IAAkBJ,GAAG,KAAG,EAH9B;AAAA;AAAA;AAAA;;AAIIK,YAAAA,OAAO,CAACC,GAAR,CAAY,yCAAZ;AACAD,YAAAA,OAAO,CAACC,GAAR,CAAY,0DAAZ;AALJ;AAAA;;AAAA;AAAA;AAWMD,YAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCa,gBAAlC;AAXN;AAAA,mBAYqBZ,qBAAYC,OAAZ,CAAoBR,GAApB,EAAyB;AAAES,cAAAA,eAAe,EAAE;AAAnB,aAAzB,CAZrB;;AAAA;AAYMC,YAAAA,MAZN;AAaMC,YAAAA,EAAE,GAAGD,MAAM,CAACC,EAAP,CAAUO,QAAV,CAAL;AAbN;AAAA,mBAcYP,EAAE,CAACC,UAAH,CAAcO,gBAAd,EAAgCE,SAAhC,CAA0CJ,WAA1C,CAdZ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAiBMZ,YAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;;AAjBN;AAAA;AAoBQI,YAAAA,MAAM,CAACK,KAAP;AApBR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["/* dbUtils.js\n * desc: Utilities for interacting with MongoDB transactional data store\n *       hosted on mlab.com.\n */\n\nimport { MongoClient } from 'mongodb';\n\n/* getMostRecentETHData()\n * desc: Reads ETH data from MongoDB\n * return: json block of data for ETH daily transaction activity\n */\n async function getMostRecentETHData() {\n  var url = process.env.URLEth;\n  if (url==undefined || url===\"\") {\n    console.log(\"MongoDB url not set in the environment.\");\n    console.log(\"Try running source SetMongoEnv.sh prior to running this.\");\n  }\n  else {\n    var client;\n    var db;\n    try {\n      client = await MongoClient.connect(url, { useNewUrlParser: true });\n      db = client.db(\"ethereum\");\n      return await db.collection(\"marketdata.eth_transactions\").find({}).toArray();\n    } finally {\n      client.close();\n    }\n  }\n}\n\n/* writeResultsToMongo()\n * desc: Writes results from the google BigQuery into MongoDB on the cloud\n * param: dataToWrite - the json block to write to MongoDB.\n *\n */\nasync function writeResultsToMongo(dataToWrite, targetDB, targetCollection) {\n\n  var url = process.env.URLCrypto;\n  if (url==undefined || url===\"\") {\n    console.log(\"MongoDB url not set in the environment.\");\n    console.log(\"Try running source SetMongoEnv.sh prior to running this.\");\n  }\n  else {\n    var client;\n    var db;\n    try {\n      console.log(\"Writing results to\", targetCollection);\n      client = await MongoClient.connect(url, { useNewUrlParser: true });\n      db = client.db(targetDB);\n      await db.collection(targetCollection).insertOne(dataToWrite);\n    }\n    catch(err) {\n      console.log(\"Error writing to DB:\", err);\n    }\n    finally {\n        client.close();\n    }\n  }\n}\n\nexport {writeResultsToMongo, getMostRecentETHData};\n"],"file":"dbUtils.js"}