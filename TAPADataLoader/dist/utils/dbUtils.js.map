{"version":3,"sources":["../../src/utils/dbUtils.js"],"names":["getMostRecentETHData","url","process","env","URLEth","undefined","console","log","MongoClient","connect","useNewUrlParser","client","db","collection","find","toArray","close","writeResultsToMongo","dataToWrite","targetDB","targetCollection","URLCrypto","insertOne","writeResultsToMongoSync","Promise","resolve","reject","Error","message","removeCollectionFromMongo","remove"],"mappings":"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","sourcesContent":["/* dbUtils.js\n * desc: Utilities for interacting with MongoDB transactional data store\n *       hosted on mlab.com.\n */\n\nimport { MongoClient } from 'mongodb';\n\n/* getMostRecentETHData()\n * desc: Reads ETH data from MongoDB\n * return: json block of data for ETH daily transaction activity\n */\n async function getMostRecentETHData() {\n  var url = process.env.URLEth;\n  if (url==undefined || url===\"\") {\n    console.log(\"MongoDB url not set in the environment.\");\n    console.log(\"Try running source SetMongoEnv.sh prior to running this.\");\n  }\n  else {\n    var client;\n    var db;\n    try {\n      client = await MongoClient.connect(url, { useNewUrlParser: true });\n      db = client.db(\"ethereum\");\n      return await db.collection(\"eth_transactions\").find({}).toArray();\n    } finally {\n      client.close();\n    }\n  }\n}\n\n/* writeResultsToMongo()\n * desc: Writes results into MongoDB on the cloud\n * param: dataToWrite - the json block to write to MongoDB.\n *\n */\nasync function writeResultsToMongo(dataToWrite, targetDB, targetCollection) {\n\n  var url = process.env.URLCrypto;\n  if (url==undefined || url===\"\") {\n    console.log(\"MongoDB url not set in the environment.\");\n    console.log(\"Try running source SetMongoEnv.sh prior to running this.\");\n  }\n  else {\n    var client;\n    var db;\n    try {\n      console.log(\"Connect to MongoDB\");\n      client = await MongoClient.connect(url, { useNewUrlParser: true });\n      db = client.db(targetDB);\n      console.log(\"Writing results to\", targetCollection);\n      await db.collection(targetCollection).insertOne(dataToWrite);\n    }\n    catch(err) {\n      console.log(\"Error writing to DB:\", err);\n    }\n    finally {\n      if(client!==undefined)\n        client.close();\n    }\n  }\n}\n\n/* writeResultsToMongoSync()\n * desc: Writes results into MongoDB on the cloud.\n * param: dataToWrite - the json block to write to MongoDB.\n * return: A promise that the results will be written.\n *\n */\nasync function writeResultsToMongoSync(dataToWrite, targetDB, targetCollection) {\n\n  return new Promise(async function (resolve, reject) {\n  var url = process.env.URLCrypto;\n  if (url==undefined || url===\"\") {\n    console.log(\"MongoDB url not set in the environment.\");\n    console.log(\"Try running source SetMongoEnv.sh prior to running this.\");\n    reject(new Error(\"MongoDB url not set in the environment.\"));\n  }\n  else {\n    var client;\n    var db;\n    try {\n      console.log(\"Connect to MongoDB\");\n      client = await MongoClient.connect(url, { useNewUrlParser: true });\n      db = client.db(targetDB);\n      console.log(\"Writing results to\", targetCollection);\n      await db.collection(targetCollection).insertOne(dataToWrite);\n      console.log(\"Write to \" + targetCollection + \" success.\");\n      resolve(\"Write to \" + targetCollection + \" success.\");\n    }\n    catch(err) {\n      console.log(\"Error writing to DB:\", err.message);\n      reject(new Error(\"Error writing to DB.\"));\n    }\n    finally {\n        if(client!==undefined)\n          client.close();\n    }\n  }\n  });\n}\n\n/* writeResultsToMongo()\n * desc: Writes results from the google BigQuery into MongoDB on the cloud\n * param: dataToWrite - the json block to write to MongoDB.\n *\n */\nasync function removeCollectionFromMongo(targetDB, targetCollection) {\n\n  var url = process.env.URLCrypto;\n  if (url==undefined || url===\"\") {\n    console.log(\"MongoDB url not set in the environment.\");\n    console.log(\"Try running source SetMongoEnv.sh prior to running this.\");\n  }\n  else {\n    var client;\n    var db;\n    try {\n      console.log(\"Connect to MongoDB\");\n      client = await MongoClient.connect(url, { useNewUrlParser: true });\n      db = client.db(targetDB);\n      console.log(\"Deleting prior data in\", targetCollection);\n      await db.collection(targetCollection).remove();\n    }\n    catch(err) {\n      console.log(\"Error writing to DB:\", err);\n    }\n    finally {\n        client.close();\n    }\n  }\n}\n\n\nexport {writeResultsToMongo, getMostRecentETHData, removeCollectionFromMongo, writeResultsToMongoSync};\n"],"file":"dbUtils.js"}