"use strict";

require("@babel/polyfill");

var XMLHttpRequest = require("xmlhttprequest").XMLHttpRequest;

var threshold = 1.05;
var numberOfChecks = 0;
var intervalHandel = -1;
var maxBuyArb = 0;
var maxSellArb = 0;
var timeInSecondsBetweenPriceChecks = 30;

function getPricingData() {
  console.log("BEGIN: getPricingData");
  var xmlhttp = new XMLHttpRequest(),
      method = "GET",
      url = "https://poloniex.com/public?command=returnTicker";
  console.log("Loading data from : Http.send(", url, ")");
  xmlhttp.open(method, url, true);

  xmlhttp.onerror = function () {
    console.log("** An error occurred during the transaction");
  };

  xmlhttp.onreadystatechange = function () {
    if (this.readyState === 4 && this.status === 200) {
      var exchangeData = xmlhttp.responseText;
      numberOfChecks++;
      var exchangeObject = JSON.parse(exchangeData);
      analyzePrices(exchangeObject, "USDC");
      analyzePrices(exchangeObject, "USDT");

      if (numberOfChecks === 1 || numberOfChecks % 5 === 0) {
        if (intervalHandel != -1) clearInterval(intervalHandel);
        var newInteral = 1000 * (timeInSecondsBetweenPriceChecks + 20 * Math.random());
        console.log("Resetting the timer interval to ".concat(newInteral / 1000, " seconds."));
        intervalHandel = setInterval(findPricingAnomolies, newInteral);
      }
    }
  };

  xmlhttp.send();
  console.log("END: getPricingData");
}

function analyzePrices(exchangePrices, baseStableCoin) {
  var coins;
  if (baseStableCoin === "USDC") coins = ["FOAM", "ZEC", "LTC", "ETH", "XRP", "STR", "XMR", "DOGE", "BCHABC", "BCHSV"];else coins = ["BAT", "BNT", "DASH", "DOGE", "EOS", "ETC", "ETH", "GNT", "KNC", "LOOM", "LSK", "LTC", "MANA", "NXT", "QTUM", "REP", "SC", "SNT", "STR", "XMR", "XRP", "ZEC", "ZRX"];
  var timeStamp = new Date();
  var timeStampStr = timeStamp.getTime();
  console.log("priceCheckCount:".concat(numberOfChecks, "|maxBuyArb:").concat(maxBuyArb, "|maxSellArb:").concat(maxSellArb)); // Check if buying the coin will be profitable.

  coins.forEach(function (curCoin) {
    var lowestAskBTC = exchangePrices["BTC_" + curCoin].lowestAsk;
    var highestBidUSDC = exchangePrices[baseStableCoin + "_" + curCoin].highestBid;
    var USDC_BTClowestAsk = exchangePrices[baseStableCoin + "_" + "BTC"].lowestAsk;
    var ArbRatio = highestBidUSDC / (lowestAskBTC * USDC_BTClowestAsk);
    var showMax = "";

    if (ArbRatio > maxBuyArb) {
      maxBuyArb = ArbRatio;
      showMax = "NewMax";
    }

    console.log("REC|".concat(timeStamp, "|").concat(timeStampStr, "|Buy|").concat(baseStableCoin, "|").concat(curCoin, "|ArbRatio:").concat(ArbRatio, "|").concat(showMax));

    if (ArbRatio > threshold) {
      console.log("Something dramatic needs to happen!");
    }
  }); // Check if selling the coin will be profitable

  coins.forEach(function (curCoin) {
    var BTC_curCoinBid = exchangePrices["BTC_" + curCoin].highestBid;
    var USDC_BTCBid = exchangePrices[baseStableCoin + "_" + "BTC"].highestBid;
    var USDC_curCoinAsk = exchangePrices[baseStableCoin + "_" + curCoin].lowestAsk;
    var AmtInit = 10000;
    var AmtFinal = AmtInit * BTC_curCoinBid * USDC_BTCBid / USDC_curCoinAsk;
    var ArbRatio = AmtFinal / AmtInit;
    var showMax = "";

    if (ArbRatio > maxSellArb) {
      maxSellArb = ArbRatio;
      showMax = "NewMax";
    }

    console.log("REC|".concat(timeStamp, "|").concat(timeStampStr, "|Sell|").concat(baseStableCoin, "|").concat(curCoin, "|ArbRatio:").concat(ArbRatio, "|").concat(showMax));

    if (ArbRatio > threshold) {
      console.log("Something dramatic needs to happen!");
    }
  });
}
/* findPricingAnomolies
 * desc: Called periodically from setInterval.  Will check through the market pricing data and notify
 *       when any pricing anomolies are detected.
 */


function findPricingAnomolies() {
  console.log("BEGIN: findPricingAnomolies activated at:", new Date());
  getPricingData();
  console.log("END: findPricingAnomolies finished at:", new Date());
}

console.log("BEGIN: Main process to monitor prices starting at:", new Date());
console.log("Will check prices every ".concat(timeInSecondsBetweenPriceChecks, " seconds"));
getPricingData();
console.log("END: Main process to monitor prices ending at:", new Date());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,