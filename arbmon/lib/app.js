"use strict";

require("@babel/polyfill");

var XMLHttpRequest = require("xmlhttprequest").XMLHttpRequest;

var threshold = 1.01;
var numberOfChecks = 0;
var intervalHandel = -1;
var maxBuyArb = 0;
var maxSellArb = 0;
var maxSellArbETH = 0;
var maxSellArbXMR = 0;
var timeInSecondsBetweenPriceChecks = 15;

function getPricingData() {
  console.log("BEGIN: getPricingData");
  var xmlhttp = new XMLHttpRequest(),
      method = "GET",
      url = "https://poloniex.com/public?command=returnTicker";
  console.log("Loading data from : Http.send(", url, ")");
  xmlhttp.open(method, url, true);

  xmlhttp.onerror = function () {
    console.log("** An error occurred during the transaction");
  };

  xmlhttp.onreadystatechange = function () {
    if (this.readyState === 4 && this.status === 200) {
      var exchangeData = xmlhttp.responseText;
      numberOfChecks++;
      var timeStamp = new Date();
      var exchangeObject = JSON.parse(exchangeData);
      var coins = ["FOAM", "ZEC", "LTC", "ETH", "XRP", "STR", "XMR", "DOGE", "BCHABC", "BCHSV"];
      var baseStableCoin = "USDC";
      analyzePrices(exchangeObject, baseStableCoin, coins, timeStamp);
      coins = ["BAT", "BNT", "DASH", "DOGE", "EOS", "ETC", "ETH", "GNT", "KNC", "LOOM", "LSK", "LTC", "MANA", "NXT", "QTUM", "REP", "SC", "SNT", "STR", "XMR", "XRP", "ZEC", "ZRX"];
      baseStableCoin = "USDT";
      analyzePrices(exchangeObject, baseStableCoin, coins, timeStamp);
      analyzeETHPrices(exchangeObject, timeStamp);
      analyzeXMRPrices(exchangeObject, timeStamp);

      if (numberOfChecks === 1 || numberOfChecks % 5 === 0) {
        if (intervalHandel != -1) clearInterval(intervalHandel);
        var newInteral = 1000 * (timeInSecondsBetweenPriceChecks + 20 * Math.random());
        console.log("Resetting the timer interval to ".concat(newInteral / 1000, " seconds."));
        intervalHandel = setInterval(findPricingAnomolies, newInteral);
      }
    }
  };

  xmlhttp.send();
  console.log("END: getPricingData");
}

function analyzePrices(exchangePrices, baseStableCoin, coins, timeStamp) {
  var timeStampStr = timeStamp.getTime();
  console.log("priceCheckCount:".concat(numberOfChecks, "|").concat(baseStableCoin, "|maxBuyArb:").concat(maxBuyArb, "|maxSellArb:").concat(maxSellArb)); // Check if buying the coin will be profitable.

  coins.forEach(function (curCoin) {
    var lowestAskBTC = exchangePrices["BTC_" + curCoin].lowestAsk;
    var highestBidUSDC = exchangePrices[baseStableCoin + "_" + curCoin].highestBid;
    var USDC_BTClowestAsk = exchangePrices[baseStableCoin + "_" + "BTC"].lowestAsk;
    var ArbRatio = highestBidUSDC / (lowestAskBTC * USDC_BTClowestAsk);
    var showMax = "";

    if (ArbRatio > maxBuyArb) {
      maxBuyArb = ArbRatio;
      showMax = "NewMax";
    }

    if (ArbRatio > 1.0) console.log("REC|".concat(timeStamp, "|").concat(timeStampStr, "|Buy|").concat(baseStableCoin, "|").concat(curCoin, "|ArbRatio:").concat(ArbRatio, "|").concat(showMax));

    if (ArbRatio > threshold) {
      console.log("Something dramatic needs to happen!");
    }
  }); // Check if selling the coin will be profitable

  coins.forEach(function (curCoin) {
    var BTC_curCoinBid = exchangePrices["BTC_" + curCoin].highestBid;
    var USDC_BTCBid = exchangePrices[baseStableCoin + "_" + "BTC"].highestBid;
    var USDC_curCoinAsk = exchangePrices[baseStableCoin + "_" + curCoin].lowestAsk;
    var AmtInit = 10000;
    var AmtFinal = AmtInit * BTC_curCoinBid * USDC_BTCBid / USDC_curCoinAsk;
    var ArbRatio = AmtFinal / AmtInit;
    var showMax = "";

    if (ArbRatio > maxSellArb) {
      maxSellArb = ArbRatio;
      showMax = "NewMax";
    }

    if (ArbRatio > 1.0) console.log("REC|".concat(timeStamp, "|").concat(timeStampStr, "|Sell|").concat(baseStableCoin, "|").concat(curCoin, "|ArbRatio:").concat(ArbRatio, "|").concat(showMax));

    if (ArbRatio > threshold) {
      console.log("Something dramatic needs to happen!");
    }
  });
}

function analyzeETHPrices(exchangePrices, timeStamp) {
  var timeStampStr = timeStamp.getTime();
  console.log("priceCheckCount:".concat(numberOfChecks, "|ETH|maxBuyArb:N/A|maxSellArbETH:").concat(maxSellArbETH));
  var coins = ["BAT", "BNT", "CVC", "EOS", "ETC", "GAS", "GNT", "KNC", "LOOM", "LSK", "MANA", "OMG", "QTUM", "REP", "SNT", "STEEM", "ZEC", "ZRX"]; // Check if selling the coin will be profitable

  coins.forEach(function (curCoin) {
    var ETH_curCoinBid = exchangePrices["ETH_" + curCoin].highestBid;
    var BTC_ETHBid = exchangePrices["BTC_ETH"].highestBid;
    var BTC_curCoinAsk = exchangePrices["BTC_" + curCoin].lowestAsk;
    var AmtInit = 1;
    var AmtFinal = AmtInit * BTC_ETHBid * ETH_curCoinBid / BTC_curCoinAsk;
    var ArbRatio = AmtFinal / AmtInit;
    var showMax = "";

    if (ArbRatio > maxSellArbETH) {
      maxSellArbETH = ArbRatio;
      showMax = "NewMax";
    }

    if (ArbRatio > 1.0) console.log("REC|".concat(timeStamp, "|").concat(timeStampStr, "|Sell|").concat(curCoin, "|ETH|ArbRatio:").concat(ArbRatio, "|").concat(showMax));

    if (ArbRatio > threshold) {
      var instructions = "ALERT: Sell ".concat(AmtInit, " ").concat(curCoin, " for ").concat(AmtInit * ETH_curCoinBid, " ETH, \n        then sell those ETH for ").concat(AmtInit * ETH_curCoinBid * BTC_ETHBid, " BTC,\n        then use those BTC to buy ").concat(AmtFinal, " ").concat(curCoin);
      console.log(instructions);
    }
  });
}

function analyzeXMRPrices(exchangePrices, timeStamp) {
  var timeStampStr = timeStamp.getTime();
  console.log("priceCheckCount:".concat(numberOfChecks, "|XMR|maxBuyArb:N/A|maxSellArbXMR:").concat(maxSellArbXMR));
  var coins = ["LTC", "ZEC", "NXT", "DASH", "BCN", "MAID"]; // Check if selling the coin will be profitable

  coins.forEach(function (curCoin) {
    var baseMarket = "XMR";
    var baseMarket_curCoinBid = exchangePrices[baseMarket + "_" + curCoin].highestBid;
    var BTC_baseMarketBid = exchangePrices["BTC" + "_" + baseMarket].highestBid;
    var BTC_curCoinAsk = exchangePrices["BTC" + "_" + curCoin].lowestAsk;
    var AmtInit = 1;
    var AmtFinal = AmtInit * BTC_baseMarketBid * baseMarket_curCoinBid / BTC_curCoinAsk;
    var ArbRatio = AmtFinal / AmtInit;
    var showMax = "";

    if (ArbRatio > maxSellArbXMR) {
      maxSellArbXMR = ArbRatio;
      showMax = "NewMax";
    }

    if (ArbRatio > 1.0) console.log("REC|".concat(timeStamp, "|").concat(timeStampStr, "|Sell|").concat(curCoin, "|XMR|ArbRatio:").concat(ArbRatio, "|").concat(showMax));

    if (ArbRatio > threshold) {
      var instructions = "ALERT: Sell ".concat(AmtInit, " ").concat(curCoin, " for ").concat(AmtInit * baseMarket_curCoinBid, " XMR, \n        then sell those XMR for ").concat(AmtInit * BTC_baseMarketBid * baseMarket_curCoinBid, " BTC,\n        then use those BTC to buy ").concat(AmtFinal, " ").concat(curCoin);
      console.log(instructions);
    }
  });
}
/* findPricingAnomolies
 * desc: Called periodically from setInterval.  Will check through the market pricing data and notify
 *       when any pricing anomolies are detected.
 */


function findPricingAnomolies() {
  console.log("BEGIN: findPricingAnomolies activated at:", new Date());
  getPricingData();
  console.log("END: findPricingAnomolies finished at:", new Date());
}

console.log("BEGIN: Main process to monitor prices starting at:", new Date());
console.log("Will check prices every ".concat(timeInSecondsBetweenPriceChecks, " seconds"));
getPricingData();
console.log("END: Main process to monitor prices ending at:", new Date());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9hcHAuanMiXSwibmFtZXMiOlsicmVxdWlyZSIsIlhNTEh0dHBSZXF1ZXN0IiwidGhyZXNob2xkIiwibnVtYmVyT2ZDaGVja3MiLCJpbnRlcnZhbEhhbmRlbCIsIm1heEJ1eUFyYiIsIm1heFNlbGxBcmIiLCJtYXhTZWxsQXJiRVRIIiwibWF4U2VsbEFyYlhNUiIsInRpbWVJblNlY29uZHNCZXR3ZWVuUHJpY2VDaGVja3MiLCJnZXRQcmljaW5nRGF0YSIsImNvbnNvbGUiLCJsb2ciLCJ4bWxodHRwIiwibWV0aG9kIiwidXJsIiwib3BlbiIsIm9uZXJyb3IiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwic3RhdHVzIiwiZXhjaGFuZ2VEYXRhIiwicmVzcG9uc2VUZXh0IiwidGltZVN0YW1wIiwiRGF0ZSIsImV4Y2hhbmdlT2JqZWN0IiwiSlNPTiIsInBhcnNlIiwiY29pbnMiLCJiYXNlU3RhYmxlQ29pbiIsImFuYWx5emVQcmljZXMiLCJhbmFseXplRVRIUHJpY2VzIiwiYW5hbHl6ZVhNUlByaWNlcyIsImNsZWFySW50ZXJ2YWwiLCJuZXdJbnRlcmFsIiwiTWF0aCIsInJhbmRvbSIsInNldEludGVydmFsIiwiZmluZFByaWNpbmdBbm9tb2xpZXMiLCJzZW5kIiwiZXhjaGFuZ2VQcmljZXMiLCJ0aW1lU3RhbXBTdHIiLCJnZXRUaW1lIiwiZm9yRWFjaCIsImN1ckNvaW4iLCJsb3dlc3RBc2tCVEMiLCJsb3dlc3RBc2siLCJoaWdoZXN0QmlkVVNEQyIsImhpZ2hlc3RCaWQiLCJVU0RDX0JUQ2xvd2VzdEFzayIsIkFyYlJhdGlvIiwic2hvd01heCIsIkJUQ19jdXJDb2luQmlkIiwiVVNEQ19CVENCaWQiLCJVU0RDX2N1ckNvaW5Bc2siLCJBbXRJbml0IiwiQW10RmluYWwiLCJFVEhfY3VyQ29pbkJpZCIsIkJUQ19FVEhCaWQiLCJCVENfY3VyQ29pbkFzayIsImluc3RydWN0aW9ucyIsImJhc2VNYXJrZXQiLCJiYXNlTWFya2V0X2N1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QUlZLElBQUosRUFBekQ7QUFDQWQsRUFBQUEsY0FBYztBQUNkQyxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSx3Q0FBWixFQUFzRCxJQUFJWSxJQUFKLEVBQXREO0FBQ0Q7O0FBRURiLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLG9EQUFaLEVBQWtFLElBQUlZLElBQUosRUFBbEU7QUFDQWIsT0FBTyxDQUFDQyxHQUFSLG1DQUF1Q0gsK0JBQXZDO0FBQ0FDLGNBQWM7QUFDZEMsT0FBTyxDQUFDQyxHQUFSLENBQVksZ0RBQVosRUFBOEQsSUFBSVksSUFBSixFQUE5RCIsInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoXCJAYmFiZWwvcG9seWZpbGxcIik7XG5cbnZhciBYTUxIdHRwUmVxdWVzdCA9IHJlcXVpcmUoXCJ4bWxodHRwcmVxdWVzdFwiKS5YTUxIdHRwUmVxdWVzdDtcbnZhciB0aHJlc2hvbGQgPSAxLjAxO1xudmFyIG51bWJlck9mQ2hlY2tzID0gMDtcbnZhciBpbnRlcnZhbEhhbmRlbCA9IC0xO1xudmFyIG1heEJ1eUFyYiA9IDA7XG52YXIgbWF4U2VsbEFyYiA9IDA7XG52YXIgbWF4U2VsbEFyYkVUSCA9IDA7XG52YXIgbWF4U2VsbEFyYlhNUiA9IDA7XG5cbmNvbnN0IHRpbWVJblNlY29uZHNCZXR3ZWVuUHJpY2VDaGVja3MgPSAxNTtcblxuZnVuY3Rpb24gZ2V0UHJpY2luZ0RhdGEoKSB7XG5cbiAgY29uc29sZS5sb2coXCJCRUdJTjogZ2V0UHJpY2luZ0RhdGFcIik7XG4gIHZhciB4bWxodHRwID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCksXG4gICAgbWV0aG9kID0gXCJHRVRcIixcbiAgICB1cmwgPSBcImh0dHBzOi8vcG9sb25pZXguY29tL3B1YmxpYz9jb21tYW5kPXJldHVyblRpY2tlclwiO1xuXG4gIGNvbnNvbGUubG9nKFwiTG9hZGluZyBkYXRhIGZyb20gOiBIdHRwLnNlbmQoXCIsIHVybCwgXCIpXCIpO1xuICB4bWxodHRwLm9wZW4obWV0aG9kLCB1cmwsIHRydWUpO1xuICB4bWxodHRwLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgY29uc29sZS5sb2coXCIqKiBBbiBlcnJvciBvY2N1cnJlZCBkdXJpbmcgdGhlIHRyYW5zYWN0aW9uXCIpO1xuICB9O1xuICB4bWxodHRwLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLnJlYWR5U3RhdGU9PT00ICYmIHRoaXMuc3RhdHVzPT09MjAwKSB7XG4gICAgICBsZXQgZXhjaGFuZ2VEYXRhID0geG1saHR0cC5yZXNwb25zZVRleHQ7XG4gICAgICBudW1iZXJPZkNoZWNrcysrO1xuICAgICAgbGV0IHRpbWVTdGFtcCA9IG5ldyBEYXRlKCk7XG4gICAgICBsZXQgZXhjaGFuZ2VPYmplY3QgPSBKU09OLnBhcnNlKGV4Y2hhbmdlRGF0YSk7XG4gICAgICBsZXQgY29pbnMgPSBbXCJGT0FNXCIsIFwiWkVDXCIsIFwiTFRDXCIsIFwiRVRIXCIsIFwiWFJQXCIsIFwiU1RSXCIsIFwiWE1SXCIsIFwiRE9HRVwiLCBcIkJDSEFCQ1wiLCBcIkJDSFNWXCJdO1xuICAgICAgbGV0IGJhc2VTdGFibGVDb2luID0gXCJVU0RDXCI7XG4gICAgICBhbmFseXplUHJpY2VzKGV4Y2hhbmdlT2JqZWN0LCBiYXNlU3RhYmxlQ29pbiwgY29pbnMsIHRpbWVTdGFtcCk7XG4gICAgICBjb2lucyA9IFtcIkJBVFwiLCBcIkJOVFwiLCBcIkRBU0hcIiwgXCJET0dFXCIsIFwiRU9TXCIsIFwiRVRDXCIsIFwiRVRIXCIsIFwiR05UXCIsIFwiS05DXCIsIFwiTE9PTVwiLCBcIkxTS1wiLFxuICAgICAgICBcIkxUQ1wiLCBcIk1BTkFcIiwgXCJOWFRcIiwgXCJRVFVNXCIsIFwiUkVQXCIsIFwiU0NcIiwgXCJTTlRcIiwgXCJTVFJcIiwgXCJYTVJcIiwgXCJYUlBcIiwgXCJaRUNcIiwgXCJaUlhcIl07XG4gICAgICBiYXNlU3RhYmxlQ29pbiA9IFwiVVNEVFwiOyBcbiAgICAgIGFuYWx5emVQcmljZXMoZXhjaGFuZ2VPYmplY3QsIGJhc2VTdGFibGVDb2luLCBjb2lucywgdGltZVN0YW1wKTtcbiAgICAgIGFuYWx5emVFVEhQcmljZXMoZXhjaGFuZ2VPYmplY3QsIHRpbWVTdGFtcCk7XG4gICAgICBhbmFseXplWE1SUHJpY2VzKGV4Y2hhbmdlT2JqZWN0LCB0aW1lU3RhbXApO1xuICAgICAgaWYgKG51bWJlck9mQ2hlY2tzPT09MSB8fCBudW1iZXJPZkNoZWNrcyU1PT09MCkge1xuICAgICAgICBpZiAoaW50ZXJ2YWxIYW5kZWwhPS0xKVxuICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWxIYW5kZWwpO1xuICAgICAgICBsZXQgbmV3SW50ZXJhbCA9IDEwMDAqKHRpbWVJblNlY29uZHNCZXR3ZWVuUHJpY2VDaGVja3MgKyAyMCpNYXRoLnJhbmRvbSgpKTtcbiAgICAgICAgY29uc29sZS5sb2coYFJlc2V0dGluZyB0aGUgdGltZXIgaW50ZXJ2YWwgdG8gJHtuZXdJbnRlcmFsLzEwMDB9IHNlY29uZHMuYCApO1xuICAgICAgICBpbnRlcnZhbEhhbmRlbCA9IHNldEludGVydmFsKCBmaW5kUHJpY2luZ0Fub21vbGllcywgIG5ld0ludGVyYWwpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICB4bWxodHRwLnNlbmQoKTtcbiAgY29uc29sZS5sb2coXCJFTkQ6IGdldFByaWNpbmdEYXRhXCIpO1xufVxuXG5mdW5jdGlvbiBhbmFseXplUHJpY2VzKGV4Y2hhbmdlUHJpY2VzLCBiYXNlU3RhYmxlQ29pbiwgY29pbnMsIHRpbWVTdGFtcCkge1xuXG4gIGxldCB0aW1lU3RhbXBTdHIgPSB0aW1lU3RhbXAuZ2V0VGltZSgpO1xuICBjb25zb2xlLmxvZyhgcHJpY2VDaGVja0NvdW50OiR7bnVtYmVyT2ZDaGVja3N9fCR7YmFzZVN0YWJsZUNvaW59fG1heEJ1eUFyYjoke21heEJ1eUFyYn18bWF4U2VsbEFyYjoke21heFNlbGxBcmJ9YCk7XG4gIC8vIENoZWNrIGlmIGJ1eWluZyB0aGUgY29pbiB3aWxsIGJlIHByb2ZpdGFibGUuXG4gIGNvaW5zLmZvckVhY2goY3VyQ29pbiA9PiB7XG4gICAgbGV0IGxvd2VzdEFza0JUQyA9IGV4Y2hhbmdlUHJpY2VzW1wiQlRDX1wiICsgY3VyQ29pbl0ubG93ZXN0QXNrO1xuICAgIGxldCBoaWdoZXN0QmlkVVNEQyA9IGV4Y2hhbmdlUHJpY2VzW2Jhc2VTdGFibGVDb2luICsgXCJfXCIgKyBjdXJDb2luXS5oaWdoZXN0QmlkO1xuICAgIGxldCBVU0RDX0JUQ2xvd2VzdEFzayA9IGV4Y2hhbmdlUHJpY2VzW2Jhc2VTdGFibGVDb2luICsgXCJfXCIgKyBcIkJUQ1wiXS5sb3dlc3RBc2s7XG4gICAgbGV0IEFyYlJhdGlvID0gaGlnaGVzdEJpZFVTREMgLyAoIGxvd2VzdEFza0JUQyAqICBVU0RDX0JUQ2xvd2VzdEFzayk7XG4gICAgbGV0IHNob3dNYXggPSBcIlwiO1xuICAgIGlmIChBcmJSYXRpbz5tYXhCdXlBcmIpIHtcbiAgICAgIG1heEJ1eUFyYiA9IEFyYlJhdGlvO1xuICAgICAgc2hvd01heCA9IFwiTmV3TWF4XCI7XG4gICAgfVxuICAgIGlmIChBcmJSYXRpbz4xLjApXG4gICAgICBjb25zb2xlLmxvZyhgUkVDfCR7dGltZVN0YW1wfXwke3RpbWVTdGFtcFN0cn18QnV5fCR7YmFzZVN0YWJsZUNvaW59fCR7Y3VyQ29pbn18QXJiUmF0aW86JHtBcmJSYXRpb318JHtzaG93TWF4fWApO1xuICAgIGlmIChBcmJSYXRpbyA+IHRocmVzaG9sZCkge1xuICAgICAgY29uc29sZS5sb2coXCJTb21ldGhpbmcgZHJhbWF0aWMgbmVlZHMgdG8gaGFwcGVuIVwiKTtcbiAgICB9XG4gIH0pO1xuICAvLyBDaGVjayBpZiBzZWxsaW5nIHRoZSBjb2luIHdpbGwgYmUgcHJvZml0YWJsZVxuICBjb2lucy5mb3JFYWNoKGN1ckNvaW4gPT4ge1xuICAgIGxldCBCVENfY3VyQ29pbkJpZCA9IGV4Y2hhbmdlUHJpY2VzW1wiQlRDX1wiK2N1ckNvaW5dLmhpZ2hlc3RCaWQ7XG4gICAgbGV0IFVTRENfQlRDQmlkID0gZXhjaGFuZ2VQcmljZXNbYmFzZVN0YWJsZUNvaW4gKyBcIl9cIiArIFwiQlRDXCJdLmhpZ2hlc3RCaWQ7XG4gICAgbGV0IFVTRENfY3VyQ29pbkFzayA9IGV4Y2hhbmdlUHJpY2VzW2Jhc2VTdGFibGVDb2luICsgXCJfXCIgK2N1ckNvaW5dLmxvd2VzdEFzaztcbiAgICBsZXQgQW10SW5pdCA9IDEwMDAwO1xuICAgIGxldCBBbXRGaW5hbCA9IEFtdEluaXQqQlRDX2N1ckNvaW5CaWQqVVNEQ19CVENCaWQvVVNEQ19jdXJDb2luQXNrO1xuICAgIGxldCBBcmJSYXRpbyA9IEFtdEZpbmFsL0FtdEluaXQ7XG4gICAgbGV0IHNob3dNYXggPSBcIlwiO1xuICAgIGlmIChBcmJSYXRpbz5tYXhTZWxsQXJiKSB7XG4gICAgICBtYXhTZWxsQXJiID0gQXJiUmF0aW87XG4gICAgICBzaG93TWF4ID0gXCJOZXdNYXhcIjtcbiAgICB9XG4gICAgaWYgKEFyYlJhdGlvPjEuMClcbiAgICAgIGNvbnNvbGUubG9nKGBSRUN8JHt0aW1lU3RhbXB9fCR7dGltZVN0YW1wU3RyfXxTZWxsfCR7YmFzZVN0YWJsZUNvaW59fCR7Y3VyQ29pbn18QXJiUmF0aW86JHtBcmJSYXRpb318JHtzaG93TWF4fWApO1xuICAgIGlmIChBcmJSYXRpbyA+IHRocmVzaG9sZCkge1xuICAgICAgY29uc29sZS5sb2coXCJTb21ldGhpbmcgZHJhbWF0aWMgbmVlZHMgdG8gaGFwcGVuIVwiKTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBhbmFseXplRVRIUHJpY2VzKGV4Y2hhbmdlUHJpY2VzLCB0aW1lU3RhbXApIHtcblxuICBsZXQgdGltZVN0YW1wU3RyID0gdGltZVN0YW1wLmdldFRpbWUoKTtcbiAgY29uc29sZS5sb2coYHByaWNlQ2hlY2tDb3VudDoke251bWJlck9mQ2hlY2tzfXxFVEh8bWF4QnV5QXJiOk4vQXxtYXhTZWxsQXJiRVRIOiR7bWF4U2VsbEFyYkVUSH1gKTtcbiAgbGV0IGNvaW5zID0gW1wiQkFUXCIsIFwiQk5UXCIsIFwiQ1ZDXCIsIFwiRU9TXCIsIFwiRVRDXCIsIFwiR0FTXCIsIFwiR05UXCIsIFwiS05DXCIsIFwiTE9PTVwiLCBcIkxTS1wiLCBcbiAgICBcIk1BTkFcIiwgXCJPTUdcIiwgXCJRVFVNXCIsIFwiUkVQXCIsIFwiU05UXCIsIFwiU1RFRU1cIiwgXCJaRUNcIiwgXCJaUlhcIl07XG4gIC8vIENoZWNrIGlmIHNlbGxpbmcgdGhlIGNvaW4gd2lsbCBiZSBwcm9maXRhYmxlXG4gIGNvaW5zLmZvckVhY2goY3VyQ29pbiA9PiB7XG4gICAgbGV0IEVUSF9jdXJDb2luQmlkID0gZXhjaGFuZ2VQcmljZXNbXCJFVEhfXCIrY3VyQ29pbl0uaGlnaGVzdEJpZDtcbiAgICBsZXQgQlRDX0VUSEJpZCA9IGV4Y2hhbmdlUHJpY2VzW1wiQlRDX0VUSFwiXS5oaWdoZXN0QmlkO1xuICAgIGxldCBCVENfY3VyQ29pbkFzayA9IGV4Y2hhbmdlUHJpY2VzW1wiQlRDX1wiK2N1ckNvaW5dLmxvd2VzdEFzaztcbiAgICBsZXQgQW10SW5pdCA9IDE7XG4gICAgbGV0IEFtdEZpbmFsID0gQW10SW5pdCpCVENfRVRIQmlkKkVUSF9jdXJDb2luQmlkL0JUQ19jdXJDb2luQXNrO1xuICAgIGxldCBBcmJSYXRpbyA9IEFtdEZpbmFsL0FtdEluaXQ7XG4gICAgbGV0IHNob3dNYXggPSBcIlwiO1xuICAgIGlmIChBcmJSYXRpbz5tYXhTZWxsQXJiRVRIKSB7XG4gICAgICBtYXhTZWxsQXJiRVRIID0gQXJiUmF0aW87XG4gICAgICBzaG93TWF4ID0gXCJOZXdNYXhcIjtcbiAgICB9XG4gICAgaWYgKEFyYlJhdGlvPjEuMClcbiAgICAgIGNvbnNvbGUubG9nKGBSRUN8JHt0aW1lU3RhbXB9fCR7dGltZVN0YW1wU3RyfXxTZWxsfCR7Y3VyQ29pbn18RVRIfEFyYlJhdGlvOiR7QXJiUmF0aW99fCR7c2hvd01heH1gKTtcbiAgICBpZiAoQXJiUmF0aW8gPiB0aHJlc2hvbGQpIHtcbiAgICAgIGxldCBpbnN0cnVjdGlvbnMgPSBgQUxFUlQ6IFNlbGwgJHtBbXRJbml0fSAke2N1ckNvaW59IGZvciAke0FtdEluaXQqRVRIX2N1ckNvaW5CaWR9IEVUSCwgXG4gICAgICAgIHRoZW4gc2VsbCB0aG9zZSBFVEggZm9yICR7QW10SW5pdCpFVEhfY3VyQ29pbkJpZCpCVENfRVRIQmlkfSBCVEMsXG4gICAgICAgIHRoZW4gdXNlIHRob3NlIEJUQyB0byBidXkgJHtBbXRGaW5hbH0gJHtjdXJDb2lufWA7XG4gICAgICBjb25zb2xlLmxvZyhpbnN0cnVjdGlvbnMpO1xuICAgIH1cblxuICB9KTtcbn1cblxuXG5mdW5jdGlvbiBhbmFseXplWE1SUHJpY2VzKGV4Y2hhbmdlUHJpY2VzLCB0aW1lU3RhbXApIHtcblxuICBsZXQgdGltZVN0YW1wU3RyID0gdGltZVN0YW1wLmdldFRpbWUoKTtcbiAgY29uc29sZS5sb2coYHByaWNlQ2hlY2tDb3VudDoke251bWJlck9mQ2hlY2tzfXxYTVJ8bWF4QnV5QXJiOk4vQXxtYXhTZWxsQXJiWE1SOiR7bWF4U2VsbEFyYlhNUn1gKTtcbiAgbGV0IGNvaW5zID0gW1wiTFRDXCIsIFwiWkVDXCIsIFwiTlhUXCIsIFwiREFTSFwiLCBcIkJDTlwiLCBcIk1BSURcIl07XG4gIC8vIENoZWNrIGlmIHNlbGxpbmcgdGhlIGNvaW4gd2lsbCBiZSBwcm9maXRhYmxlXG4gIGNvaW5zLmZvckVhY2goY3VyQ29pbiA9PiB7XG4gICAgbGV0IGJhc2VNYXJrZXQgPSBcIlhNUlwiO1xuICAgIGxldCBiYXNlTWFya2V0X2N1ckNvaW5CaWQgPSBleGNoYW5nZVByaWNlc1tiYXNlTWFya2V0ICsgXCJfXCIgKyBjdXJDb2luXS5oaWdoZXN0QmlkO1xuICAgIGxldCBCVENfYmFzZU1hcmtldEJpZCA9IGV4Y2hhbmdlUHJpY2VzW1wiQlRDXCIgKyBcIl9cIiArIGJhc2VNYXJrZXRdLmhpZ2hlc3RCaWQ7XG4gICAgbGV0IEJUQ19jdXJDb2luQXNrID0gZXhjaGFuZ2VQcmljZXNbXCJCVENcIiArIFwiX1wiICsgY3VyQ29pbl0ubG93ZXN0QXNrO1xuICAgIGxldCBBbXRJbml0ID0gMTtcbiAgICBsZXQgQW10RmluYWwgPSBBbXRJbml0KkJUQ19iYXNlTWFya2V0QmlkKmJhc2VNYXJrZXRfY3VyQ29pbkJpZC9CVENfY3VyQ29pbkFzaztcbiAgICBsZXQgQXJiUmF0aW8gPSBBbXRGaW5hbC9BbXRJbml0O1xuICAgIGxldCBzaG93TWF4ID0gXCJcIjtcbiAgICBpZiAoQXJiUmF0aW8+bWF4U2VsbEFyYlhNUikge1xuICAgICAgbWF4U2VsbEFyYlhNUiA9IEFyYlJhdGlvO1xuICAgICAgc2hvd01heCA9IFwiTmV3TWF4XCI7XG4gICAgfVxuICAgIGlmIChBcmJSYXRpbz4xLjApXG4gICAgICBjb25zb2xlLmxvZyhgUkVDfCR7dGltZVN0YW1wfXwke3RpbWVTdGFtcFN0cn18U2VsbHwke2N1ckNvaW59fFhNUnxBcmJSYXRpbzoke0FyYlJhdGlvfXwke3Nob3dNYXh9YCk7XG4gICAgaWYgKEFyYlJhdGlvID4gdGhyZXNob2xkKSB7XG4gICAgICBsZXQgaW5zdHJ1Y3Rpb25zID0gYEFMRVJUOiBTZWxsICR7QW10SW5pdH0gJHtjdXJDb2lufSBmb3IgJHtBbXRJbml0KmJhc2VNYXJrZXRfY3VyQ29pbkJpZH0gWE1SLCBcbiAgICAgICAgdGhlbiBzZWxsIHRob3NlIFhNUiBmb3IgJHtBbXRJbml0KkJUQ19iYXNlTWFya2V0QmlkKmJhc2VNYXJrZXRfY3VyQ29pbkJpZH0gQlRDLFxuICAgICAgICB0aGVuIHVzZSB0aG9zZSBCVEMgdG8gYnV5ICR7QW10RmluYWx9ICR7Y3VyQ29pbn1gO1xuICAgICAgY29uc29sZS5sb2coaW5zdHJ1Y3Rpb25zKTtcbiAgICB9XG5cbiAgfSk7XG59XG5cbi8qIGZpbmRQcmljaW5nQW5vbW9saWVzXG4gKiBkZXNjOiBDYWxsZWQgcGVyaW9kaWNhbGx5IGZyb20gc2V0SW50ZXJ2YWwuICBXaWxsIGNoZWNrIHRocm91Z2ggdGhlIG1hcmtldCBwcmljaW5nIGRhdGEgYW5kIG5vdGlmeVxuICogICAgICAgd2hlbiBhbnkgcHJpY2luZyBhbm9tb2xpZXMgYXJlIGRldGVjdGVkLlxuICovXG5mdW5jdGlvbiBmaW5kUHJpY2luZ0Fub21vbGllcygpIHtcblxuICBjb25zb2xlLmxvZyhcIkJFR0lOOiBmaW5kUHJpY2luZ0Fub21vbGllcyBhY3RpdmF0ZWQgYXQ6XCIsIG5ldyBEYXRlKCkpO1xuICBnZXRQcmljaW5nRGF0YSgpO1xuICBjb25zb2xlLmxvZyhcIkVORDogZmluZFByaWNpbmdBbm9tb2xpZXMgZmluaXNoZWQgYXQ6XCIsIG5ldyBEYXRlKCkpO1xufVxuXG5jb25zb2xlLmxvZyhcIkJFR0lOOiBNYWluIHByb2Nlc3MgdG8gbW9uaXRvciBwcmljZXMgc3RhcnRpbmcgYXQ6XCIsIG5ldyBEYXRlKCkpO1xuY29uc29sZS5sb2coYFdpbGwgY2hlY2sgcHJpY2VzIGV2ZXJ5ICR7dGltZUluU2Vjb25kc0JldHdlZW5QcmljZUNoZWNrc30gc2Vjb25kc2AgKTtcbmdldFByaWNpbmdEYXRhKCk7XG5jb25zb2xlLmxvZyhcIkVORDogTWFpbiBwcm9jZXNzIHRvIG1vbml0b3IgcHJpY2VzIGVuZGluZyBhdDpcIiwgbmV3IERhdGUoKSk7XG4iXX0=