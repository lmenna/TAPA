"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.comparePoloniexCoinbase = comparePoloniexCoinbase;
exports.compareAllPoloniexBittrex = compareAllPoloniexBittrex;
exports.compareAllPoloniexHitbtc = compareAllPoloniexHitbtc;

var _sendEMail = require("./sendEMail");

/* comparePricingData.js
 * Consolidates function to compare crypto markets looking for significant arbitrage opportunities.
 * Sends notifications when large arbitrage is detected.
 */
// Set this to be a clear trading opportunity
var arbEmailThresholdPercent = 1.25; // Set this to be the fees associated with trading

var arbReportingThresholdPercent = 0.0;
/* formatTimestamp
 * desc: Simple utility to truncate the output of long time stamps to include only the date and time parts.
 */

function formatTimestamp(timeStamp) {
  return timeStamp.toString().slice(0, 25);
}
/* comparePoloniexCoinbase
 * desc: Main function called to compare the Poloniex and Coinbase crypto markets.
 *       This function is exported and called be app.js
 */


function comparePoloniexCoinbase(poloData, cbData, coin) {
  var poloJSON = JSON.parse(poloData.exchangeData);
  var cbJSON = JSON.parse(cbData.exchangeData);
  var timeStamp = new Date();
  console.log("".concat(formatTimestamp(timeStamp), ": PoloTime-CBTime: ").concat(poloData.timeStamp.getTime() - cbData.timeStamp.getTime(), "."));
  compareCurrencyPair(timeStamp, poloJSON, cbJSON, "USDC", coin);
}
/* compareCurrencyPair
 * desc: Compares a currency pair between Poloniex and Coinbase.  Notifies when significant arbitrage opportunities
 *       occur.
 */


function compareCurrencyPair(timeStamp, poloJSON, cbJSON, ccy1, ccy2) {
  var poloPair = ccy1 + "_" + ccy2;
  var poloBuyAt = +poloJSON[poloPair].lowestAsk;
  var cbSellAt = +cbJSON.bids[0][0];
  var arbOpportunity = cbSellAt - poloBuyAt;
  var arbPercent = 100 * (cbSellAt - poloBuyAt) / ((cbSellAt + poloBuyAt) / 2);

  if (arbPercent > arbReportingThresholdPercent) {
    var msg = "".concat(formatTimestamp(timeStamp), ": Pair: ").concat(poloPair, ", Result: GAIN, Desc: ").concat(poloPair, ". BUY Polo at: poloBuyAt: ").concat(poloBuyAt.toFixed(8), " SELL Coinbase at: ").concat(cbSellAt.toFixed(8), ", Amount: ").concat(arbOpportunity.toFixed(7), ", ").concat(arbPercent.toFixed(6), "%");
    if (arbPercent > arbEmailThresholdPercent) (0, _sendEMail.SendMessage)("".concat(poloPair, ": BUY ").concat(ccy2, " at Poloniex and SELL at Coinbase"), msg);
    console.log(msg);
  } else {
    console.log("".concat(formatTimestamp(timeStamp), ": Pair: ").concat(poloPair, ", Result: LOSS, Desc: poloBuyAt: ").concat(poloBuyAt.toFixed(8), " compared to cbSellAt: ").concat(cbSellAt.toFixed(8), ", DIFF: ").concat(arbOpportunity.toFixed(7)));
  }

  var cbBuyAt = +cbJSON.asks[0][0];
  var poloSellAt = +poloJSON[poloPair].highestBid;
  arbOpportunity = poloSellAt - cbBuyAt;
  arbPercent = 100 * (poloSellAt - cbBuyAt) / ((poloSellAt + cbBuyAt) / 2);

  if (arbPercent > arbReportingThresholdPercent) {
    var _msg = "".concat(formatTimestamp(timeStamp), ": Pair: ").concat(poloPair, ", Result: GAIN, Desc: ").concat(poloPair, ". BUY Coinbase at: cbBuyAt: ").concat(cbBuyAt.toFixed(7), " SELL Polo at: ").concat(poloSellAt.toFixed(7), ", Gain: ").concat(arbOpportunity.toFixed(7), ", ").concat(arbPercent.toFixed(6), "%");

    if (arbPercent > arbEmailThresholdPercent) (0, _sendEMail.SendMessage)("".concat(poloPair, ": BUY ").concat(ccy2, " at Coinbase and SELL at Poloniex"), _msg);
    console.log(_msg);
  } else {
    console.log("".concat(formatTimestamp(timeStamp), ": Pair: ").concat(poloPair, ", Result: LOSS, Desc: cbBuyAt: ").concat(cbBuyAt.toFixed(7), " compared to poloSellAt: ").concat(poloSellAt.toFixed(7), ", DIFF: ").concat(arbOpportunity.toFixed(7)));
  }
}
/* compareAllPoloniexBittrex
 * desc: Takes the poloniex and bittrex data in JSON format and compares all overlaping markets for arbitrage.
 *       Exported function called by the main app.js
 */


function compareAllPoloniexBittrex(poloJSON, bittrexJSON) {
  var reportingTimestamp = new Date();
  var poloTimestamp = poloJSON.timeStamp;
  var poloAllMarkets = JSON.parse(poloJSON.exchangeData);
  var bittrexTimestamp = bittrexJSON.timeStamp;
  console.log(poloTimestamp);
  console.log(bittrexTimestamp);

  for (var bittrexMkt in bittrexJSON.exchangeData) {
    var poloMktName = poloMktFromBittrexName(bittrexMkt);
    var poloMktElement = poloAllMarkets[poloMktName];
    comparePoloniexBittrexMktElement(poloMktElement, bittrexJSON.exchangeData[bittrexMkt], poloMktName, reportingTimestamp);
  }
}
/* comparePoloniexBittrexMktElement
 * desc: Compares a particular market between the Poloniex and Bittrex exchanges.  Sedn notifications when
 *       significant arbitrage opportunities exist.
 */


function comparePoloniexBittrexMktElement(poloJSON, bittrexJSON, poloPair, timeStamp) {
  var poloBuyAt = +poloJSON.lowestAsk;
  var poloSellAt = +poloJSON.highestBid;
  var bittrexSellAt = +bittrexJSON.Bid;
  var bittrexBuyAt = +bittrexJSON.Ask;
  outputArbResults(poloBuyAt, poloSellAt, bittrexSellAt, bittrexBuyAt, "Bittrex", poloPair, timeStamp);
}

function outputArbResults(poloBuyAt, poloSellAt, exchange2SellAt, exchange2BuyAt, exchange2Name, poloPair, timeStamp) {
  var arbOpportunity = poloSellAt - exchange2BuyAt;
  var arbPercent = 100 * (poloSellAt - exchange2BuyAt) / ((poloSellAt + exchange2BuyAt) / 2);

  if (arbPercent > arbReportingThresholdPercent) {
    var msg = "".concat(formatTimestamp(timeStamp), ": Pair: ").concat(poloPair, ", Result: GAIN, Desc: ").concat(poloPair, ". BUY at ").concat(exchange2Name, ": ").concat(exchange2BuyAt.toFixed(8), " SELL Polo at, ").concat(poloSellAt.toFixed(8), ", Gain, ").concat(arbOpportunity.toFixed(7), ", ").concat(arbPercent.toFixed(6), "%");
    console.log(msg);

    if (arbPercent > arbEmailThresholdPercent) {
      var msgBody = "".concat(poloPair, " BUY at ").concat(exchange2Name, " for ").concat(exchange2BuyAt.toFixed(8), ".  Sell at Poloniex for ").concat(poloSellAt.toFixed(8), ", Gain: ").concat(arbPercent.toFixed(6), "%");
      (0, _sendEMail.SendMessage)("".concat(poloPair, ": BUY at ").concat(exchange2Name, " and SELL at Poloniex"), msgBody);
    }
  } else {
    console.log("".concat(formatTimestamp(timeStamp), ": Pair: ").concat(poloPair, ", Result: LOSS, Desc: ").concat(exchange2Name, ", ").concat(exchange2BuyAt.toFixed(8), " is greater than poloSellAt, ").concat(poloSellAt.toFixed(8), ", DIFF, ").concat(arbOpportunity.toFixed(6)));
  }

  arbOpportunity = exchange2SellAt - poloBuyAt;
  arbPercent = 100 * (exchange2SellAt - poloBuyAt) / ((exchange2SellAt + poloBuyAt) / 2);

  if (arbPercent > arbReportingThresholdPercent) {
    var _msg2 = "".concat(formatTimestamp(timeStamp), ": Pair: ").concat(poloPair, ", Result: GAIN, Desc: ").concat(poloPair, ". BUY at Polo: poloBuyAt, ").concat(poloBuyAt.toFixed(8), " SELL ").concat(exchange2Name, " at, ").concat(exchange2SellAt.toFixed(8), ", Gain, ").concat(arbOpportunity.toFixed(7), ", ").concat(arbPercent.toFixed(6), "%");

    console.log(_msg2);

    if (arbPercent > arbEmailThresholdPercent) {
      var _msgBody = "".concat(poloPair, " BUY at Polo for ").concat(poloBuyAt.toFixed(8), ".  Sell at ").concat(exchange2Name, " for ").concat(exchange2SellAt.toFixed(8), ", Gain: ").concat(arbPercent.toFixed(6), "%");

      (0, _sendEMail.SendMessage)("".concat(poloPair, ": BUY at Poloniex and SELL at ").concat(exchange2Name), _msgBody);
    }
  } else {
    console.log("".concat(formatTimestamp(timeStamp), ": Pair: ").concat(poloPair, ", Result: LOSS, Desc: poloBuyAt, ").concat(poloBuyAt.toFixed(8), " is greater than ").concat(exchange2Name, "SellAt, ").concat(exchange2SellAt.toFixed(8), ". DIFF, ").concat(arbOpportunity.toFixed(7)));
  }
}
/* poloMktFromBittrexName
 * desc: Converts a Bittrex crypto currency pair into the Poloniex pair.
 */


function poloMktFromBittrexName(bittrexMktName) {
  return bittrexMktName.replace("-", "_");
}
/* compareAllPoloniexHitbtc
*  desc: Takes the poloniex and hitbtc data in JSON format and compares all overlaping markets for arbitrage.
*       Exported function called by the main app.js
*/


function compareAllPoloniexHitbtc(poloJSON, hitbtcJSON) {
  var reportingTimestamp = new Date();
  var poloTimestamp = poloJSON.timeStamp;
  var poloAllMarkets = JSON.parse(poloJSON.exchangeData);
  var hitbtcTimestamp = hitbtcJSON.timeStamp;
  console.log(poloTimestamp);
  console.log(hitbtcTimestamp);

  for (var hitbtcMkt in hitbtcJSON.exchangeData) {
    var poloMktName = poloMktFromHitbtcName(hitbtcMkt);
    var poloMktElement = poloAllMarkets[poloMktName];
    comparePoloniexHitbtcMktElement(poloMktElement, hitbtcJSON.exchangeData[hitbtcMkt], poloMktName, reportingTimestamp);
  }
}

function comparePoloniexHitbtcMktElement(poloMktElement, hitbtcMktElement, poloMktName, reportingTimestamp) {
  var poloBuyAt = +poloMktElement.lowestAsk;
  var poloSellAt = +poloMktElement.highestBid;
  var hitbtcSellAt = +hitbtcMktElement.bid;
  var hitbtcBuyAt = +hitbtcMktElement.ask;
  outputArbResults(poloBuyAt, poloSellAt, hitbtcSellAt, hitbtcBuyAt, "Hitbtc", poloMktName, reportingTimestamp);
}

function poloMktFromHitbtcName(hitbtcMktName) {
  var poloMktNames = {
    BCNBTC: "BTC_BCN",
    DASHBTC: "BTC_DASH",
    DOGEBTC: "BTC_DOGE",
    LSKBTC: "BTC_LSK",
    MAIDBTC: "BTC_MAID",
    REPBTC: "BTC_REP",
    XEMBTC: "BTC_XEM",
    ETHBTC: "BTC_ETH",
    ZECETH: "ETH_ZEC"
  };
  return poloMktNames[hitbtcMktName];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,