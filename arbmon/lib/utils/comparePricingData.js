"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.comparePoloniexCoinbase = comparePoloniexCoinbase;
exports.compareAllPoloniexBittrex = compareAllPoloniexBittrex;

var _sendEMail = require("./sendEMail");

// Set this to be a clear trading opportunity
var arbEmailThresholdPercent = 1.25; // Set this to be the fees associated with trading

var arbReportingThresholdPercent = 0.25;

function formatTimestamp(timeStamp) {
  return timeStamp.toString().slice(0, 25);
}

function comparePoloniexCoinbase(poloData, cbData, coin) {
  var poloJSON = JSON.parse(poloData.exchangeData);
  var cbJSON = JSON.parse(cbData.exchangeData);
  var timeStamp = new Date();
  console.log("".concat(formatTimestamp(timeStamp), ": PoloTime-CBTime: ").concat(poloData.timeStamp.getTime() - cbData.timeStamp.getTime(), "."));
  compareCurrencyPair(timeStamp, poloJSON, cbJSON, "USDC", coin);
}

function compareCurrencyPair(timeStamp, poloJSON, cbJSON, ccy1, ccy2) {
  var poloPair = ccy1 + "_" + ccy2;
  var poloBuyAt = +poloJSON[poloPair].lowestAsk;
  var cbSellAt = +cbJSON.bids[0][0];
  var arbOpportunity = cbSellAt - poloBuyAt;
  var arbPercent = 100 * (cbSellAt - poloBuyAt) / ((cbSellAt + poloBuyAt) / 2);

  if (arbPercent > arbReportingThresholdPercent) {
    var msg = "".concat(formatTimestamp(timeStamp), ": Pair: ").concat(poloPair, ", Result: GAIN, Desc: ").concat(poloPair, ". BUY Polo at: poloBuyAt: ").concat(poloBuyAt, " SELL Coinbase at: ").concat(cbSellAt, ", Amount: ").concat(arbOpportunity);
    if (arbPercent > arbEmailThresholdPercent) (0, _sendEMail.SendMessage)("".concat(poloPair, ": BUY ").concat(ccy2, " at Poloniex and SELL at Coinbase"), msg);
    console.log(msg);
  } else {
    console.log("".concat(formatTimestamp(timeStamp), ": Pair: ").concat(poloPair, ", Result: LOSS, Desc: poloBuyAt: ").concat(poloBuyAt, " compared to cbSellAt: ").concat(cbSellAt, ", DIFF: ").concat(arbOpportunity.toFixed(6)));
  }

  var cbBuyAt = +cbJSON.asks[0][0];
  var poloSellAt = +poloJSON[poloPair].highestBid;
  arbOpportunity = poloSellAt - cbBuyAt;
  arbPercent = 100 * (poloSellAt - cbBuyAt) / ((poloSellAt + cbBuyAt) / 2);

  if (arbPercent > arbReportingThresholdPercent) {
    var _msg = "".concat(formatTimestamp(timeStamp), ": Pair: ").concat(poloPair, ", Result: GAIN, Desc: ").concat(poloPair, ". BUY Coinbase at: cbBuyAt: ").concat(cbBuyAt, " SELL Polo at: ").concat(poloSellAt, ", Gain: ").concat(arbOpportunity);

    if (arbPercent > arbEmailThresholdPercent) (0, _sendEMail.SendMessage)("".concat(poloPair, ": BUY ").concat(ccy2, " at Coinbase and SELL at Poloniex"), _msg);
    console.log(_msg);
  } else {
    console.log("".concat(formatTimestamp(timeStamp), ": Pair: ").concat(poloPair, ", Result: LOSS, Desc: cbBuyAt: ").concat(cbBuyAt, " compared to poloSellAt: ").concat(poloSellAt, ", DIFF: ").concat(arbOpportunity.toFixed(6)));
  }
}

function comparePoloBittrexCcyPair(poloJSON, bittrexJSON, baseCcy, coin) {
  var timeStamp = new Date();
  var poloPair = baseCcy + "_" + coin.toUpperCase();
  var poloBuyAt = +poloJSON[poloPair].lowestAsk;
  var poloSellAt = +poloJSON[poloPair].highestBid;
  var bittrexSellAt = bittrexJSON.result[0].Bid;
  var bittrexBuyAt = bittrexJSON.result[0].Ask;
  var arbOpportunity = poloSellAt - bittrexBuyAt;

  if (arbOpportunity > arbReportingThreshold) {
    var msg = "".concat(timeStamp, ": Pair: ").concat(poloPair, ", Result: GAIN, Desc: ").concat(poloPair, ". BUY ").concat(coin, " at Bittrex: bittrexBuyAt, ").concat(bittrexBuyAt, " SELL Polo at, ").concat(poloSellAt, ", Gain, ").concat(arbOpportunity);
    if (arbOpportunity > arbEmailThreshold) (0, _sendEMail.SendMessage)("".concat(poloPair, ": BUY ").concat(coin, " at Bittrex and SELL at Poloniex"), msg);
    console.log(msg);
  } else {
    console.log("".concat(timeStamp, ": Pair: ").concat(poloPair, ", Result: LOSS, Desc: bittrexBuyAt, ").concat(bittrexBuyAt, " is greater than poloSellAt, ").concat(poloSellAt, ". DIFF, ").concat(arbOpportunity.toFixed(6)));
  }

  arbOpportunity = bittrexSellAt - poloBuyAt;

  if (arbOpportunity > arbReportingThreshold) {
    var _msg2 = "".concat(timeStamp, ": Pair: ").concat(poloPair, ", Result: GAIN, Desc: ").concat(poloPair, ". BUY ").concat(coin, " at Polo: poloBuyAt, ").concat(poloBuyAt, " SELL Bittrex at, ").concat(bittrexSellAt, ", Gain, ").concat(arbOpportunity);

    if (arbOpportunity > arbEmailThreshold) (0, _sendEMail.SendMessage)("".concat(poloPair, ": BUY ").concat(coin, " at Poloniex and SELL at Bittrex"), _msg2);
    console.log(_msg2);
  } else {
    console.log("".concat(timeStamp, ": Pair: ").concat(poloPair, ", Result: LOSS, Desc: poloBuyAt, ").concat(poloBuyAt, " is greater than bittrexSellAt, ").concat(bittrexSellAt, ". DIFF, ").concat(arbOpportunity.toFixed(6)));
  }
}

function comparePoloniexBittrex(poloniexData, bittrexData, basecoin, coins) {
  var timeStamp = new Date();
  var poloJSON = JSON.parse(poloniexData.exchangeData);
  coins.forEach(function (coin) {
    var bittrexJSON = JSON.parse(bittrexData[coin].exchangeData);
    console.log("".concat(timeStamp, ": PoloTime-BittrexTime: ").concat(poloniexData.timeStamp.getTime() - bittrexData[coin].timeStamp.getTime(), "."));
    comparePoloBittrexCcyPair(poloJSON, bittrexJSON, basecoin, coin);
  });
}

function compareAllPoloniexBittrex(poloJSON, bittrexJSON) {
  var reportingTimestamp = new Date();
  var poloTimestamp = poloJSON.timeStamp;
  var poloAllMarkets = JSON.parse(poloJSON.exchangeData);
  var bittrexTimestamp = bittrexJSON.timeStamp;
  console.log(poloTimestamp);
  console.log(bittrexTimestamp);

  for (var bittrexMkt in bittrexJSON.exchangeData) {
    var poloMktName = poloMktFromBittrexName(bittrexMkt);
    var poloMktElement = poloAllMarkets[poloMktName];
    comparePoloniexBittrexMktElement(poloMktElement, bittrexJSON.exchangeData[bittrexMkt], poloMktName, reportingTimestamp);
  }
}

function comparePoloniexBittrexMktElement(poloJSON, bittrexJSON, poloPair, timeStamp) {
  var poloBuyAt = +poloJSON.lowestAsk;
  var poloSellAt = +poloJSON.highestBid;
  var bittrexSellAt = +bittrexJSON.Bid;
  var bittrexBuyAt = +bittrexJSON.Ask;
  var arbOpportunity = poloSellAt - bittrexBuyAt;
  var arbPercent = 100 * (poloSellAt - bittrexBuyAt) / ((poloSellAt + bittrexBuyAt) / 2);

  if (arbPercent > arbReportingThresholdPercent) {
    var msg = "".concat(formatTimestamp(timeStamp), ": Pair: ").concat(poloPair, ", Result: GAIN, Desc: ").concat(poloPair, ". BUY at Bittrex: bittrexBuyAt, ").concat(bittrexBuyAt, " SELL Polo at, ").concat(poloSellAt, ", Gain, ").concat(arbOpportunity.toFixed(6), ", ").concat(arbPercent.toFixed(6), "%");
    console.log(msg);

    if (arbPercent > arbEmailThresholdPercent) {
      var msgBody = "".concat(poloPair, "\n\n").concat(poloPair, " BUY at Bittrex for ").concat(bittrexBuyAt, ".  Sell at Poloniex for ").concat(poloSellAt, "\n");
      (0, _sendEMail.SendMessage)("".concat(poloPair, ": BUY at Bittrex and SELL at Poloniex"), msgBody);
    }
  } else {
    console.log("".concat(formatTimestamp(timeStamp), ": Pair: ").concat(poloPair, ", Result: LOSS, Desc: bittrexBuyAt, ").concat(bittrexBuyAt, " is greater than poloSellAt, ").concat(poloSellAt, ". DIFF, ").concat(arbOpportunity.toFixed(6)));
  }

  arbOpportunity = bittrexSellAt - poloBuyAt;
  arbPercent = 100 * (bittrexSellAt - poloBuyAt) / ((bittrexSellAt + poloBuyAt) / 2);

  if (arbPercent > arbReportingThresholdPercent) {
    var _msg3 = "".concat(formatTimestamp(timeStamp), ": Pair: ").concat(poloPair, ", Result: GAIN, Desc: ").concat(poloPair, ". BUY at Polo: poloBuyAt, ").concat(poloBuyAt, " SELL Bittrex at, ").concat(bittrexSellAt, ", Gain, ").concat(arbOpportunity.toFixed(6), ", ").concat(arbPercent.toFixed(6), "%");

    console.log(_msg3);

    if (arbPercent > arbEmailThresholdPercent) {
      var _msgBody = "".concat(poloPair, "\n\n").concat(poloPair, " BUY at Polo for ").concat(poloBuyAt, ".  Sell at Bittrex for ").concat(bittrexSellAt);

      (0, _sendEMail.SendMessage)("".concat(poloPair, ": BUY at Poloniex and SELL at Bittrex"), _msgBody);
    }
  } else {
    console.log("".concat(formatTimestamp(timeStamp), ": Pair: ").concat(poloPair, ", Result: LOSS, Desc: poloBuyAt, ").concat(poloBuyAt, " is greater than bittrexSellAt, ").concat(bittrexSellAt, ". DIFF, ").concat(arbOpportunity.toFixed(6)));
  }
}

function poloMktFromBittrexName(bittrexMktName) {
  return bittrexMktName.replace("-", "_");
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,