"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.comparePoloniexCoinbase = comparePoloniexCoinbase;
exports.compareAllPoloniexBittrex = compareAllPoloniexBittrex;

var _sendEMail = require("./sendEMail");

/* comparePricingData.js
 * Consolidates function to compare crypto markets looking for significant arbitrage opportunities.
 * Sends notifications when large arbitrage is detected.
 */
// Set this to be a clear trading opportunity
var arbEmailThresholdPercent = 1.25; // Set this to be the fees associated with trading

var arbReportingThresholdPercent = 0.0;
/* formatTimestamp
 * desc: Simple utility to truncate the output of long time stamps to include only the date and time parts.
 */

function formatTimestamp(timeStamp) {
  return timeStamp.toString().slice(0, 25);
}
/* comparePoloniexCoinbase
 * desc: Main function called to compare the Poloniex and Coinbase crypto markets.
 *       This function is exported and called be app.js
 */


function comparePoloniexCoinbase(poloData, cbData, coin) {
  var poloJSON = JSON.parse(poloData.exchangeData);
  var cbJSON = JSON.parse(cbData.exchangeData);
  var timeStamp = new Date();
  console.log("".concat(formatTimestamp(timeStamp), ": PoloTime-CBTime: ").concat(poloData.timeStamp.getTime() - cbData.timeStamp.getTime(), "."));
  compareCurrencyPair(timeStamp, poloJSON, cbJSON, "USDC", coin);
}
/* compareCurrencyPair
 * desc: Compares a currency pair between Poloniex and Coinbase.  Notifies when significant arbitrage opportunities
 *       occur.
 */


function compareCurrencyPair(timeStamp, poloJSON, cbJSON, ccy1, ccy2) {
  var poloPair = ccy1 + "_" + ccy2;
  var poloBuyAt = +poloJSON[poloPair].lowestAsk;
  var cbSellAt = +cbJSON.bids[0][0];
  var arbOpportunity = cbSellAt - poloBuyAt;
  var arbPercent = 100 * (cbSellAt - poloBuyAt) / ((cbSellAt + poloBuyAt) / 2);

  if (arbPercent > arbReportingThresholdPercent) {
    var msg = "".concat(formatTimestamp(timeStamp), ": Pair: ").concat(poloPair, ", Result: GAIN, Desc: ").concat(poloPair, ". BUY Polo at: poloBuyAt: ").concat(poloBuyAt.toFixed(8), " SELL Coinbase at: ").concat(cbSellAt.toFixed(8), ", Amount: ").concat(arbOpportunity.toFixed(7), ", ").concat(arbPercent.toFixed(6), "%");
    if (arbPercent > arbEmailThresholdPercent) (0, _sendEMail.SendMessage)("".concat(poloPair, ": BUY ").concat(ccy2, " at Poloniex and SELL at Coinbase"), msg);
    console.log(msg);
  } else {
    console.log("".concat(formatTimestamp(timeStamp), ": Pair: ").concat(poloPair, ", Result: LOSS, Desc: poloBuyAt: ").concat(poloBuyAt.toFixed(8), " compared to cbSellAt: ").concat(cbSellAt.toFixed(8), ", DIFF: ").concat(arbOpportunity.toFixed(7)));
  }

  var cbBuyAt = +cbJSON.asks[0][0];
  var poloSellAt = +poloJSON[poloPair].highestBid;
  arbOpportunity = poloSellAt - cbBuyAt;
  arbPercent = 100 * (poloSellAt - cbBuyAt) / ((poloSellAt + cbBuyAt) / 2);

  if (arbPercent > arbReportingThresholdPercent) {
    var _msg = "".concat(formatTimestamp(timeStamp), ": Pair: ").concat(poloPair, ", Result: GAIN, Desc: ").concat(poloPair, ". BUY Coinbase at: cbBuyAt: ").concat(cbBuyAt.toFixed(7), " SELL Polo at: ").concat(poloSellAt.toFixed(7), ", Gain: ").concat(arbOpportunity.toFixed(7), ", ").concat(arbPercent.toFixed(6), "%");

    if (arbPercent > arbEmailThresholdPercent) (0, _sendEMail.SendMessage)("".concat(poloPair, ": BUY ").concat(ccy2, " at Coinbase and SELL at Poloniex"), _msg);
    console.log(_msg);
  } else {
    console.log("".concat(formatTimestamp(timeStamp), ": Pair: ").concat(poloPair, ", Result: LOSS, Desc: cbBuyAt: ").concat(cbBuyAt.toFixed(7), " compared to poloSellAt: ").concat(poloSellAt.toFixed(7), ", DIFF: ").concat(arbOpportunity.toFixed(7)));
  }
}
/* compareAllPoloniexBittrex
 * desc: Takes the poloniex and bittrex data in JSON format and compares all overlaping markets for arbitrage.
 *       Exported function called by the main app.js
 */


function compareAllPoloniexBittrex(poloJSON, bittrexJSON) {
  var reportingTimestamp = new Date();
  var poloTimestamp = poloJSON.timeStamp;
  var poloAllMarkets = JSON.parse(poloJSON.exchangeData);
  var bittrexTimestamp = bittrexJSON.timeStamp;
  console.log(poloTimestamp);
  console.log(bittrexTimestamp);

  for (var bittrexMkt in bittrexJSON.exchangeData) {
    var poloMktName = poloMktFromBittrexName(bittrexMkt);
    var poloMktElement = poloAllMarkets[poloMktName];
    comparePoloniexBittrexMktElement(poloMktElement, bittrexJSON.exchangeData[bittrexMkt], poloMktName, reportingTimestamp);
  }
}
/* comparePoloniexBittrexMktElement
 * desc: Compares a particular market between the Poloniex and Bittrex exchanges.  Sedn notifications when
 *       significant arbitrage opportunities exist.
 */


function comparePoloniexBittrexMktElement(poloJSON, bittrexJSON, poloPair, timeStamp) {
  var poloBuyAt = +poloJSON.lowestAsk;
  var poloSellAt = +poloJSON.highestBid;
  var bittrexSellAt = +bittrexJSON.Bid;
  var bittrexBuyAt = +bittrexJSON.Ask;
  var arbOpportunity = poloSellAt - bittrexBuyAt;
  var arbPercent = 100 * (poloSellAt - bittrexBuyAt) / ((poloSellAt + bittrexBuyAt) / 2);

  if (arbPercent > arbReportingThresholdPercent) {
    var msg = "".concat(formatTimestamp(timeStamp), ": Pair: ").concat(poloPair, ", Result: GAIN, Desc: ").concat(poloPair, ". BUY at Bittrex: bittrexBuyAt, ").concat(bittrexBuyAt.toFixed(8), " SELL Polo at, ").concat(poloSellAt.toFixed(8), ", Gain, ").concat(arbOpportunity.toFixed(7), ", ").concat(arbPercent.toFixed(6), "%");
    console.log(msg);

    if (arbPercent > arbEmailThresholdPercent) {
      var msgBody = "".concat(poloPair, "\n\n").concat(poloPair, " BUY at Bittrex for ").concat(bittrexBuyAt.toFixed(8), ".  Sell at Poloniex for ").concat(poloSellAt.toFixed(8), "\n");
      (0, _sendEMail.SendMessage)("".concat(poloPair, ": BUY at Bittrex and SELL at Poloniex"), msgBody);
    }
  } else {
    console.log("".concat(formatTimestamp(timeStamp), ": Pair: ").concat(poloPair, ", Result: LOSS, Desc: bittrexBuyAt, ").concat(bittrexBuyAt.toFixed(8), " is greater than poloSellAt, ").concat(poloSellAt.toFixed(8), ", DIFF, ").concat(arbOpportunity.toFixed(6)));
  }

  arbOpportunity = bittrexSellAt - poloBuyAt;
  arbPercent = 100 * (bittrexSellAt - poloBuyAt) / ((bittrexSellAt + poloBuyAt) / 2);

  if (arbPercent > arbReportingThresholdPercent) {
    var _msg2 = "".concat(formatTimestamp(timeStamp), ": Pair: ").concat(poloPair, ", Result: GAIN, Desc: ").concat(poloPair, ". BUY at Polo: poloBuyAt, ").concat(poloBuyAt.toFixed(8), " SELL Bittrex at, ").concat(bittrexSellAt.toFixed(8), ", Gain, ").concat(arbOpportunity.toFixed(7), ", ").concat(arbPercent.toFixed(6), "%");

    console.log(_msg2);

    if (arbPercent > arbEmailThresholdPercent) {
      var _msgBody = "".concat(poloPair, "\n\n").concat(poloPair, " BUY at Polo for ").concat(poloBuyAt.toFixed(8), ".  Sell at Bittrex for ").concat(bittrexSellAt.toFixed(8));

      (0, _sendEMail.SendMessage)("".concat(poloPair, ": BUY at Poloniex and SELL at Bittrex"), _msgBody);
    }
  } else {
    console.log("".concat(formatTimestamp(timeStamp), ": Pair: ").concat(poloPair, ", Result: LOSS, Desc: poloBuyAt, ").concat(poloBuyAt.toFixed(8), " is greater than bittrexSellAt, ").concat(bittrexSellAt.toFixed(8), ". DIFF, ").concat(arbOpportunity.toFixed(7)));
  }
}
/* poloMktFromBittrexName
 * desc: Converts a Bittrex crypto currency pair into the Poloniex pair.
 */


function poloMktFromBittrexName(bittrexMktName) {
  return bittrexMktName.replace("-", "_");
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,