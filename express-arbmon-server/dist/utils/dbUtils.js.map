{"version":3,"sources":["../../src/utils/dbUtils.js"],"names":["getMostRecentETHData","url","process","env","URLEth","undefined","console","log","MongoClient","connect","useNewUrlParser","client","db","collection","find","toArray","close","getArbitrageData","URLCrypto","results","writeResultsToMongo","dataToWrite","targetDB","targetCollection","insertOne","updateResultsInMongo","key","updateOne","$set","upsert","w","writeResultsToMongoSync","Promise","resolve","reject","Error","message","removeCollectionFromMongo","remove"],"mappings":"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","sourcesContent":["/* dbUtils.js\n * desc: Utilities for interacting with MongoDB transactional data store\n *       hosted on mlab.com.\n */\n\n// npm install mongodb --save-dev\nimport { MongoClient } from 'mongodb';\n\n/* getMostRecentETHData()\n * desc: Reads ETH data from MongoDB\n * return: json block of data for ETH daily transaction activity\n */\nasync function getMostRecentETHData() {\n  var url = process.env.URLEth;\n  if (url==undefined || url===\"\") {\n    console.log(\"MongoDB url not set in the environment.\");\n    console.log(\"Try running source SetMongoEnv.sh prior to running this.\");\n  }\n  else {\n    var client;\n    var db;\n    try {\n      client = await MongoClient.connect(url, { useNewUrlParser: true });\n      db = client.db(\"ethereum\");\n      return await db.collection(\"eth_transactions\").find({}).toArray();\n    } finally {\n      client.close();\n    }\n  }\n}\n\n/* getArbitrageData()\n * desc: Reads crypto arbitrage data from the mongoDB\n * return: json block with arbitrage data for all markets\n */\nasync function getArbitrageData() {\n  var url = process.env.URLCrypto;\n  if (url==undefined || url===\"\") {\n    console.log(\"MongoDB url not set in the environment.\");\n    console.log(\"Try running source SetMongoEnv.sh prior to running this.\");\n  }\n  else {\n    var client;\n    var db;\n    try {\n      client = await MongoClient.connect(url, { useNewUrlParser: true });\n      db = client.db(\"crypto\");\n      console.log(\"getArbitrageData - marketdata.arbmon\");\n      let results = await db.collection(\"marketdata.arbmon-p\").find({}).toArray();\n      return(results); \n    } finally {\n      client.close();\n    }\n  }\n}\n\n/* writeResultsToMongo()\n * desc: Writes results into MongoDB on the cloud\n * param: dataToWrite - the json block to write to MongoDB.\n *\n */\nasync function writeResultsToMongo(dataToWrite, targetDB, targetCollection) {\n\n  var url = process.env.URLCrypto;\n  if (url==undefined || url===\"\") {\n    console.log(\"MongoDB url not set in the environment.\");\n    console.log(\"Try running source SetMongoEnv.sh prior to running this.\");\n  }\n  else {\n    var client;\n    var db;\n    try {\n      console.log(\"Connect to MongoDB\");\n      client = await MongoClient.connect(url, { useNewUrlParser: true });\n      db = client.db(targetDB);\n      console.log(\"Writing results to\", targetCollection);\n      await db.collection(targetCollection).insertOne(dataToWrite);\n    }\n    catch(err) {\n      console.log(\"Error writing to DB:\", err);\n    }\n    finally {\n      if(client!==undefined)\n        client.close();\n    }\n  }\n}\n\n/* updateResultsInMongo()\n * desc: Updates an existing record in the database.  If record doesn't exist it is created.\n * param: dataToWrite - the json block to write to MongoDB.\n *\n */\nasync function updateResultsInMongo(key, dataToWrite, targetDB, targetCollection) {\n\n  var url = process.env.URLCrypto;\n  if (url==undefined || url===\"\") {\n    console.log(\"MongoDB url not set in the environment.\");\n    console.log(\"Try running source SetMongoEnv.sh prior to running this.\");\n  }\n  else {\n    var client;\n    var db;\n    try {\n      client = await MongoClient.connect(url, { useNewUrlParser: true });\n      db = client.db(targetDB);\n      await db.collection(targetCollection).updateOne(key, {$set: dataToWrite}, {upsert:true, w: 1});\n    }\n    catch(err) {\n      console.log(\"Error writing to DB:\", err);\n    }\n    finally {\n      if(client!==undefined)\n        client.close();\n    }\n  }\n}\n\n/* writeResultsToMongoSync()\n * desc: Writes results into MongoDB on the cloud.\n * param: dataToWrite - the json block to write to MongoDB.\n * return: A promise that the results will be written.\n *\n */\nasync function writeResultsToMongoSync(dataToWrite, targetDB, targetCollection) {\n\n  return new Promise(async function (resolve, reject) {\n  var url = process.env.URLCrypto;\n  if (url==undefined || url===\"\") {\n    console.log(\"MongoDB url not set in the environment.\");\n    console.log(\"Try running source SetMongoEnv.sh prior to running this.\");\n    reject(new Error(\"MongoDB url not set in the environment.\"));\n  }\n  else {\n    var client;\n    var db;\n    try {\n      console.log(\"Connect to MongoDB\");\n      client = await MongoClient.connect(url, { useNewUrlParser: true });\n      db = client.db(targetDB);\n      console.log(\"Writing results to\", targetCollection);\n      await db.collection(targetCollection).insertOne(dataToWrite);\n      console.log(\"Write to \" + targetCollection + \" success.\");\n      resolve(\"Write to \" + targetCollection + \" success.\");\n    }\n    catch(err) {\n      console.log(\"Error writing to DB:\", err.message);\n      reject(new Error(\"Error writing to DB.\"));\n    }\n    finally {\n        if(client!==undefined)\n          client.close();\n    }\n  }\n  });\n}\n\n/* removeCollectionFromMongo()\n * desc: Removes an entire collection from the database.\n * param: targetCollection - the collection to remove.\n *\n */\nasync function removeCollectionFromMongo(targetDB, targetCollection) {\n\n  var url = process.env.URLCrypto;\n  if (url==undefined || url===\"\") {\n    console.log(\"MongoDB url not set in the environment.\");\n    console.log(\"Try running source SetMongoEnv.sh prior to running this.\");\n  }\n  else {\n    var client;\n    var db;\n    try {\n      console.log(\"Connect to MongoDB\");\n      client = await MongoClient.connect(url, { useNewUrlParser: true });\n      db = client.db(targetDB);\n      console.log(\"Deleting prior data in\", targetCollection);\n      await db.collection(targetCollection).remove();\n    }\n    catch(err) {\n      console.log(\"Error writing to DB:\", err);\n    }\n    finally {\n        client.close();\n    }\n  }\n}\n\n\nexport {getArbitrageData, updateResultsInMongo, writeResultsToMongo, getMostRecentETHData, removeCollectionFromMongo, writeResultsToMongoSync};\n"],"file":"dbUtils.js"}